<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <package name="libsecret-1"/>
  <c:include name="libsecret/secret.h"/>
  <namespace name="Secret"
             version="1"
             shared-library="libsecret-1.so.0"
             c:identifier-prefixes="Secret"
             c:symbol-prefixes="secret">
    <constant name="COLLECTION_DEFAULT"
              value="default"
              c:type="SECRET_COLLECTION_DEFAULT">
      <doc xml:space="preserve"
           filename="../libsecret/secret-collection.c"
           line="75">An alias to the default collection. This can be passed to secret_password_store()
secret_collection_for_alias().</doc>
      <source-position filename="../libsecret/secret-types.h" line="37"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="COLLECTION_SESSION"
              value="session"
              c:type="SECRET_COLLECTION_SESSION">
      <doc xml:space="preserve"
           filename="../libsecret/secret-collection.c"
           line="82">An alias to the session collection, which will be cleared when the user ends
the session. This can be passed to secret_password_store(),
secret_collection_for_alias() or similar functions.</doc>
      <source-position filename="../libsecret/secret-types.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Collection"
           c:symbol-prefix="collection"
           c:type="SecretCollection"
           parent="Gio.DBusProxy"
           glib:type-name="SecretCollection"
           glib:get-type="secret_collection_get_type"
           glib:type-struct="CollectionClass">
      <doc xml:space="preserve"
           filename="../libsecret/secret-collection.c"
           line="47">A proxy object representing a collection of secrets in the Secret Service.</doc>
      <source-position filename="../libsecret/secret-collection.h" line="62"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_for_dbus_path_finish"
                   c:identifier="secret_collection_new_for_dbus_path_finish"
                   introspectable="0"
                   throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="89">Finish asynchronous operation to get a new collection proxy for a
collection in the secret service.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="42"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="97">the new collection, which should be unreferenced
         with g_object_unref()</doc>
          <type name="Collection" c:type="SecretCollection*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="91">the asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_dbus_path_sync"
                   c:identifier="secret_collection_new_for_dbus_path_sync"
                   introspectable="0"
                   stability="Unstable"
                   throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="121">Get a new collection proxy for a collection in the secret service.

If @service is NULL, then secret_service_get_sync() will be called to get
the default #SecretService proxy.

This method may block indefinitely and should not be used in user interface
threads.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="45"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="139">the new collection, which should be unreferenced
         with g_object_unref()</doc>
          <type name="Collection" c:type="SecretCollection*"/>
        </return-value>
        <parameters>
          <parameter name="service"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="123">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </parameter>
          <parameter name="collection_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="124">the D-Bus path of the collection</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="125">options for the collection initialization</doc>
            <type name="CollectionFlags" c:type="SecretCollectionFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="126">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="create" c:identifier="secret_collection_create">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="1058">Create a new collection in the secret service.

This method returns immediately and completes asynchronously. The secret
service may prompt the user. secret_service_prompt() will be used to handle
any prompts that are required.

An @alias is a well-known tag for a collection, such as 'default' (ie: the
default collection to store items in). This allows other applications to
easily identify and share a collection. If you specify an @alias, and a
collection with that alias already exists, then a new collection will not
be created. The previous one will be returned instead.

If @service is NULL, then secret_service_get() will be called to get
the default #SecretService proxy.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="service"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1060">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1061">label for the new collection</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="alias"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1062">alias to assign to the collection</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1063">currently unused</doc>
            <type name="CollectionCreateFlags"
                  c:type="SecretCollectionCreateFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1064">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1065">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1066">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="create_finish"
                c:identifier="secret_collection_create_finish"
                throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="1123">Finish operation to create a new collection in the secret service.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="105"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-collection.c"
               line="1130">the new collection, which should be unreferenced
         with g_object_unref()</doc>
          <type name="Collection" c:type="SecretCollection*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1125">the asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </function>
      <function name="create_sync"
                c:identifier="secret_collection_create_sync"
                throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="1156">Create a new collection in the secret service.

This method may block indefinitely and should not be used in user interface
threads. The secret service may prompt the user. secret_service_prompt()
will be used to handle any prompts that are required.

An @alias is a well-known tag for a collection, such as 'default' (ie: the
default collection to store items in). This allows other applications to
easily identify and share a collection. If you specify an @alias, and a
collection with that alias already exists, then a new collection will not
be created. The previous one will be returned instead.

If @service is NULL, then secret_service_get_sync() will be called to get
the default #SecretService proxy.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="108"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-collection.c"
               line="1180">the new collection, which should be unreferenced
         with g_object_unref()</doc>
          <type name="Collection" c:type="SecretCollection*"/>
        </return-value>
        <parameters>
          <parameter name="service"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1158">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1159">label for the new collection</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="alias"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1160">alias to assign to the collection</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1161">currently unused</doc>
            <type name="CollectionCreateFlags"
                  c:type="SecretCollectionCreateFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1162">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </function>
      <function name="for_alias" c:identifier="secret_collection_for_alias">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="2105">Lookup which collection is assigned to this alias. Aliases help determine
well known collections, such as 'default'.

If @service is NULL, then secret_service_get() will be called to get
the default #SecretService proxy.

This method will return immediately and complete asynchronously.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="service"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="2107">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="2108">the alias to lookup</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="2109">options for the collection initialization</doc>
            <type name="CollectionFlags" c:type="SecretCollectionFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="2110">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="2111">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="2112">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="for_alias_finish"
                c:identifier="secret_collection_for_alias_finish"
                throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="2156">Finish an asynchronous operation to lookup which collection is assigned
to an alias.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-collection.c"
               line="2164">the collection, or %NULL if none assigned to the alias</doc>
          <type name="Collection" c:type="SecretCollection*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="2158">asynchronous result passed to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </function>
      <function name="for_alias_sync"
                c:identifier="secret_collection_for_alias_sync"
                throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="2186">Lookup which collection is assigned to this alias. Aliases help determine
well known collections, such as 'default'.

If @service is NULL, then secret_service_get_sync() will be called to get
the default #SecretService proxy.

This method may block and should not be used in user interface threads.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="76"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-collection.c"
               line="2202">the collection, or %NULL if none assigned to the alias</doc>
          <type name="Collection" c:type="SecretCollection*"/>
        </return-value>
        <parameters>
          <parameter name="service"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="2188">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="2189">the alias to lookup</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="2190">options for the collection initialization</doc>
            <type name="CollectionFlags" c:type="SecretCollectionFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="2191">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_dbus_path"
                c:identifier="secret_collection_new_for_dbus_path"
                introspectable="0"
                stability="Unstable">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="42">Get a new collection proxy for a collection in the secret service.

If @service is NULL, then secret_service_get() will be called to get
the default #SecretService proxy.

This method will return immediately and complete asynchronously.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="service"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="44">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </parameter>
          <parameter name="collection_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="45">the D-Bus path of the collection</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="46">options for the collection initialization</doc>
            <type name="CollectionFlags" c:type="SecretCollectionFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="47">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="48">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="49">data to be passed to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="delete" c:identifier="secret_collection_delete">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="1625">Delete this collection.

This method returns immediately and completes asynchronously. The secret
service may prompt the user. secret_service_prompt() will be used to handle
any prompts that show up.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1627">a collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1628">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1629">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1630">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_finish"
              c:identifier="secret_collection_delete_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="1661">Complete operation to delete this collection.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="139"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-collection.c"
               line="1669">whether the collection was successfully deleted or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1663">a collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1664">asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_sync"
              c:identifier="secret_collection_delete_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="1687">Delete this collection.

This method may block indefinitely and should not be used in user
interface threads. The secret service may prompt the user.
secret_service_prompt() will be used to handle any prompts that show up.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="143"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-collection.c"
               line="1699">whether the collection was successfully deleted or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1689">a collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1690">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_created" c:identifier="secret_collection_get_created">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="1946">Get the created date and time of the collection. The return value is
the number of seconds since the unix epoch, January 1st 1970.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="172"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-collection.c"
               line="1953">the created date and time</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1948">a collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="secret_collection_get_flags">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="1743">Get the flags representing what features of the #SecretCollection proxy
have been initialized.

Use secret_collection_load_items()  to initialize further features
and change the flags.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="149"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-collection.c"
               line="1753">the flags for features initialized</doc>
          <type name="CollectionFlags" c:type="SecretCollectionFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1745">the secret collection proxy</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_items" c:identifier="secret_collection_get_items">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="1772">Get the list of items in this collection.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="151"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-collection.c"
               line="1778">a list of items,
when done, the list should be freed with g_list_free, and each item should
be released with g_object_unref()</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Item"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1774">a collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label" c:identifier="secret_collection_get_label">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="1815">Get the label of this collection.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="153"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-collection.c"
               line="1821">the label, which should be freed with g_free()</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1817">a collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_locked" c:identifier="secret_collection_get_locked">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="1918">Get whether the collection is locked or not.

Use secret_service_lock() or secret_service_unlock() to lock or unlock the
collection.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="170"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-collection.c"
               line="1927">whether the collection is locked or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1920">a collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modified"
              c:identifier="secret_collection_get_modified">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="1972">Get the modified date and time of the collection. The return value is
the number of seconds since the unix epoch, January 1st 1970.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="174"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-collection.c"
               line="1979">the modified date and time</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1974">a collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_service" c:identifier="secret_collection_get_service">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="1728">Get the Secret Service object that this collection was created with.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="147"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-collection.c"
               line="1734">the Secret Service object</doc>
          <type name="Service" c:type="SecretService*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1730">a collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_items" c:identifier="secret_collection_load_items">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="777">Ensure that the #SecretCollection proxy has loaded all the items present
in the Secret Service. This affects the result of
secret_collection_get_items().

For collections returned from secret_service_get_collections() the items
will have already been loaded.

This method will return immediately and complete asynchronously.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="779">the secret collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="780">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="781">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="782">data to be passed to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_items_finish"
              c:identifier="secret_collection_load_items_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="843">Complete an asynchronous operation to ensure that the #SecretCollection proxy
has loaded all the items present in the Secret Service.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-collection.c"
               line="852">whether the load was successful or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="845">the secret collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="846">the asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_items_sync"
              c:identifier="secret_collection_load_items_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="870">Ensure that the #SecretCollection proxy has loaded all the items present
in the Secret Service. This affects the result of
secret_collection_get_items().

For collections returned from secret_service_get_collections() the items
will have already been loaded.

This method may block indefinitely and should not be used in user interface
threads.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-collection.c"
               line="886">whether the load was successful or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="872">the secret collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="873">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh" c:identifier="secret_collection_refresh">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="935">Refresh the properties on this collection. This fires off a request to
refresh, and the properties will be updated later.

Calling this method is not normally necessary, as the secret service
will notify the client when properties change.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="937">the collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="search" c:identifier="secret_collection_search">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="1397">Search for items matching the @attributes in the @collection.
The @attributes should be a table of string keys and string values.

If %SECRET_SEARCH_ALL is set in @flags, then all the items matching the
search will be returned. Otherwise only the first item will be returned.
This is almost always the unlocked item that was most recently stored.

If %SECRET_SEARCH_UNLOCK is set in @flags, then items will be unlocked
if necessary. In either case, locked and unlocked items will match the
search and be returned. If the unlock fails, the search does not fail.

If %SECRET_SEARCH_LOAD_SECRETS is set in @flags, then the items will have
their secret values loaded and available via secret_item_get_secret().

This function returns immediately and completes asynchronously.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1399">a secret collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
          <parameter name="schema"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1400">the schema for the attributes</doc>
            <type name="Schema" c:type="const SecretSchema*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1401">search for items matching these attributes</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1402">search option flags</doc>
            <type name="SearchFlags" c:type="SecretSearchFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1403">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1404">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1405">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_finish"
              c:identifier="secret_collection_search_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="1459">Complete asynchronous operation to search for items in a collection.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="123"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-collection.c"
               line="1467">
         a list of items that matched the search</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Item"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1461">the secret collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1462">asynchronous result passed to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_for_dbus_paths"
              c:identifier="secret_collection_search_for_dbus_paths"
              introspectable="0"
              stability="Unstable">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="320">Search for items in @collection matching the @attributes, and return their
DBus object paths. Only the specified collection is searched. The @attributes
should be a table of string keys and string values.

This function returns immediately and completes asynchronously.

When your callback is called use secret_collection_search_for_dbus_paths_finish()
to get the results of this function. Only the DBus object paths of the
items will be returned. If you would like #SecretItem objects to be returned
instead, then use the secret_collection_search() function.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="322">the secret collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
          <parameter name="schema"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="323">the schema for the attributes</doc>
            <type name="Schema" c:type="const SecretSchema*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="324">search for items matching these attributes</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="325">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="326">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="327">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_for_dbus_paths_finish"
              c:identifier="secret_collection_search_for_dbus_paths_finish"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="376">Complete asynchronous operation to search for items in a collection.

DBus object paths of the items will be returned. If you would to have
#SecretItem objects to be returned instead, then use the
secret_collection_search() and secret_collection_search_finish() functions.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="58"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="390">an array of DBus object
         paths for matching items.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="378">the secret collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="379">asynchronous result passed to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_for_dbus_paths_sync"
              c:identifier="secret_collection_search_for_dbus_paths_sync"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="416">Search for items matching the @attributes in @collection, and return their
DBus object paths. The @attributes should be a table of string keys and
string values.

This function may block indefinitely. Use the asynchronous version
in user interface threads.

DBus object paths of the items will be returned. If you would to have
#SecretItem objects to be returned instead, then use the
secret_collection_search_sync() function.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="62"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="437">an array of DBus object
         paths for matching items.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="collection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="418">the secret collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
          <parameter name="schema"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="419">the schema for the attributes</doc>
            <type name="Schema" c:type="const SecretSchema*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="420">search for items matching these attributes</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="421">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_sync"
              c:identifier="secret_collection_search_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="1531">Search for items matching the @attributes in the @collection.
The @attributes should be a table of string keys and string values.

If %SECRET_SEARCH_ALL is set in @flags, then all the items matching the
search will be returned. Otherwise only the first item will be returned.
This is almost always the unlocked item that was most recently stored.

If %SECRET_SEARCH_UNLOCK is set in @flags, then items will be unlocked
if necessary. In either case, locked and unlocked items will match the
search and be returned. If the unlock fails, the search does not fail.

If %SECRET_SEARCH_LOAD_SECRETS is set in @flags, then the items will have
their secret values loaded and available via secret_item_get_secret().

This function may block indefinitely. Use the asynchronous version
in user interface threads.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="127"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-collection.c"
               line="1557">
         a list of items that matched the search</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Item"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1533">a secret collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
          <parameter name="schema"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1534">the schema for the attributes</doc>
            <type name="Schema" c:type="const SecretSchema*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1535">search for items matching these attributes</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1536">search option flags</doc>
            <type name="SearchFlags" c:type="SecretSearchFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1537">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label" c:identifier="secret_collection_set_label">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="1840">Set the label of this collection.

This function returns immediately and completes asynchronously.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="155"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1842">a collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1843">a new label</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1844">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1845">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1846">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label_finish"
              c:identifier="secret_collection_set_label_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="1868">Complete asynchronous operation to set the label of this collection.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="161"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-collection.c"
               line="1876">whether the change was successful or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1870">a collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1871">asynchronous result passed to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label_sync"
              c:identifier="secret_collection_set_label_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="1890">Set the label of this collection.

This function may block indefinitely. Use the asynchronous version
in user interface threads.</doc>
        <source-position filename="../libsecret/secret-collection.h"
                         line="165"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-collection.c"
               line="1902">whether the change was successful or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1892">a collection</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1893">a new label</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-collection.c"
                 line="1894">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="created" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="487">The date and time (in seconds since the UNIX epoch) that this
collection was created.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="flags"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="441">A set of flags describing which parts of the secret collection have
been initialized.</doc>
        <type name="CollectionFlags"/>
      </property>
      <property name="items" introspectable="0" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="452">A list of #SecretItem objects representing the items that are in
this collection. This list will be empty if the collection is locked.</doc>
        <type/>
      </property>
      <property name="label" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="462">The human readable label for the collection.

Setting this property will result in the label of the collection being
set asynchronously. To properly track the changing of the label use the
secret_collection_set_label() function.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="locked" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="475">Whether the collection is locked or not.

To lock or unlock a collection use the secret_service_lock() or
secret_service_unlock() functions.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="modified" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="497">The date and time (in seconds since the UNIX epoch) that this
collection was last modified.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="service"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="431">The #SecretService object that this collection is associated with and
uses to interact with the actual D-Bus Secret Service.</doc>
        <type name="Service"/>
      </property>
      <field name="parent">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="pv" readable="0" private="1">
        <type name="CollectionPrivate" c:type="SecretCollectionPrivate*"/>
      </field>
    </class>
    <record name="CollectionClass"
            c:type="SecretCollectionClass"
            glib:is-gtype-struct-for="Collection">
      <doc xml:space="preserve"
           filename="../libsecret/secret-collection.c"
           line="53">The class for #SecretCollection.</doc>
      <source-position filename="../libsecret/secret-collection.h" line="62"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="55">the parent class</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="CollectionCreateFlags"
              glib:type-name="SecretCollectionCreateFlags"
              glib:get-type="secret_collection_create_flags_get_type"
              c:type="SecretCollectionCreateFlags">
      <doc xml:space="preserve"
           filename="../libsecret/secret-collection.c"
           line="68">Flags for secret_collection_create().</doc>
      <member name="none"
              value="0"
              c:identifier="SECRET_COLLECTION_CREATE_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="70">no flags</doc>
      </member>
    </bitfield>
    <bitfield name="CollectionFlags"
              glib:type-name="SecretCollectionFlags"
              glib:get-type="secret_collection_flags_get_type"
              c:type="SecretCollectionFlags">
      <doc xml:space="preserve"
           filename="../libsecret/secret-collection.c"
           line="60">Flags which determine which parts of the #SecretCollection proxy are initialized.</doc>
      <member name="none"
              value="0"
              c:identifier="SECRET_COLLECTION_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="62">no flags</doc>
      </member>
      <member name="load_items"
              value="2"
              c:identifier="SECRET_COLLECTION_LOAD_ITEMS"
              glib:nick="load-items">
        <doc xml:space="preserve"
             filename="../libsecret/secret-collection.c"
             line="63">items have or should be loaded</doc>
      </member>
    </bitfield>
    <record name="CollectionPrivate"
            c:type="SecretCollectionPrivate"
            disguised="1">
      <source-position filename="../libsecret/secret-collection.h" line="48"/>
    </record>
    <enumeration name="Error"
                 glib:type-name="SecretError"
                 glib:get-type="secret_error_get_type"
                 c:type="SecretError">
      <member name="protocol"
              value="1"
              c:identifier="SECRET_ERROR_PROTOCOL"
              glib:nick="protocol">
      </member>
      <member name="is_locked"
              value="2"
              c:identifier="SECRET_ERROR_IS_LOCKED"
              glib:nick="is-locked">
      </member>
      <member name="no_such_object"
              value="3"
              c:identifier="SECRET_ERROR_NO_SUCH_OBJECT"
              glib:nick="no-such-object">
      </member>
      <member name="already_exists"
              value="4"
              c:identifier="SECRET_ERROR_ALREADY_EXISTS"
              glib:nick="already-exists">
      </member>
      <function name="get_quark" c:identifier="secret_error_get_quark">
        <source-position filename="../libsecret/secret-types.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="Item"
           c:symbol-prefix="item"
           c:type="SecretItem"
           parent="Gio.DBusProxy"
           glib:type-name="SecretItem"
           glib:get-type="secret_item_get_type"
           glib:type-struct="ItemClass">
      <doc xml:space="preserve"
           filename="../libsecret/secret-item.c"
           line="58">A proxy object representing a secret item in the Secret Service.</doc>
      <source-position filename="../libsecret/secret-item.h" line="63"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Retrievable"/>
      <constructor name="new_for_dbus_path_finish"
                   c:identifier="secret_item_new_for_dbus_path_finish"
                   introspectable="0"
                   stability="Unstable"
                   throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="218">Finish asynchronous operation to get a new item proxy for a secret
item in the secret service.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="228">the new item, which should be unreferenced
         with g_object_unref()</doc>
          <type name="Item" c:type="SecretItem*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="220">the asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_dbus_path_sync"
                   c:identifier="secret_item_new_for_dbus_path_sync"
                   introspectable="0"
                   stability="Unstable"
                   throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="249">Get a new item proxy for a secret item in the secret service.

If @service is NULL, then secret_service_get_sync() will be called to get
the default #SecretService proxy.

This method may block indefinitely and should not be used in user interface
threads.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="78"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="267">the new item, which should be unreferenced
         with g_object_unref()</doc>
          <type name="Item" c:type="SecretItem*"/>
        </return-value>
        <parameters>
          <parameter name="service"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="251">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </parameter>
          <parameter name="item_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="252">the D-Bus path of the item</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="253">initialization flags for the new item</doc>
            <type name="ItemFlags" c:type="SecretItemFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="254">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="create" c:identifier="secret_item_create">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="750">Create a new item in the secret service.

If the @flags contains %SECRET_ITEM_CREATE_REPLACE, then the secret
service will search for an item matching the @attributes, and update that item
instead of creating a new one.

This method may block indefinitely and should not be used in user interface
threads. The secret service may prompt the user. secret_service_prompt()
will be used to handle any prompts that are required.</doc>
        <source-position filename="../libsecret/secret-item.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="collection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="752">a secret collection to create this item in</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </parameter>
          <parameter name="schema"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="753">the schema for the attributes</doc>
            <type name="Schema" c:type="const SecretSchema*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="754">attributes for the new item</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="755">label for the new item</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="756">secret value for the new item</doc>
            <type name="Value" c:type="SecretValue*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="757">flags for the creation of the new item</doc>
            <type name="ItemCreateFlags" c:type="SecretItemCreateFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="758">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="759">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="760">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="create_finish"
                c:identifier="secret_item_create_finish"
                throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="820">Finish operation to create a new item in the secret service.</doc>
        <source-position filename="../libsecret/secret-item.h" line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="827">the new item, which should be unreferenced
         with g_object_unref()</doc>
          <type name="Item" c:type="SecretItem*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="822">the asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </function>
      <function name="create_sync"
                c:identifier="secret_item_create_sync"
                throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="853">Create a new item in the secret service.

If the @flags contains %SECRET_ITEM_CREATE_REPLACE, then the secret
service will search for an item matching the @attributes, and update that item
instead of creating a new one.

This method may block indefinitely and should not be used in user interface
threads. The secret service may prompt the user. secret_service_prompt()
will be used to handle any prompts that are required.</doc>
        <source-position filename="../libsecret/secret-item.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="874">the new item, which should be unreferenced
         with g_object_unref()</doc>
          <type name="Item" c:type="SecretItem*"/>
        </return-value>
        <parameters>
          <parameter name="collection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="855">a secret collection to create this item in</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </parameter>
          <parameter name="schema"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="856">the schema for the attributes</doc>
            <type name="Schema" c:type="const SecretSchema*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="857">attributes for the new item</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="858">label for the new item</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="859">secret value for the new item</doc>
            <type name="Value" c:type="SecretValue*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="860">flags for the creation of the new item</doc>
            <type name="ItemCreateFlags" c:type="SecretItemCreateFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="861">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </function>
      <function name="load_secrets" c:identifier="secret_item_load_secrets">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="1455">Load the secret values for a secret item stored in the service.

The @items must all have the same SecretItem::service property.

This function returns immediately and completes asynchronously.</doc>
        <source-position filename="../libsecret/secret-item.h" line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="items" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1457">the items to retrieve secrets for</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Item"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1458">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1459">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1460">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="load_secrets_finish"
                c:identifier="secret_item_load_secrets_finish"
                throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="1525">Complete asynchronous operation to load the secret values for
secret items stored in the service.

Items that are locked will not have their secrets loaded.</doc>
        <source-position filename="../libsecret/secret-item.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="1535">whether the operation succeeded or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1527">asynchronous result passed to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </function>
      <function name="load_secrets_sync"
                c:identifier="secret_item_load_secrets_sync"
                throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="1554">Load the secret values for a secret item stored in the service.

The @items must all have the same SecretItem::service property.

This method may block indefinitely and should not be used in user interface
threads.

Items that are locked will not have their secrets loaded.</doc>
        <source-position filename="../libsecret/secret-item.h" line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="1569">whether the operation succeeded or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="items" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1556">the items to retrieve secrets for</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Item"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1557">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_dbus_path"
                c:identifier="secret_item_new_for_dbus_path"
                introspectable="0"
                stability="Unstable">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="171">Get a new item proxy for a secret item in the secret service.

If @service is NULL, then secret_service_get() will be called to get
the default #SecretService proxy.

This method will return immediately and complete asynchronously.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="service"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="173">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </parameter>
          <parameter name="item_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="174">the D-Bus path of the collection</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="175">initialization flags for the new item</doc>
            <type name="ItemFlags" c:type="SecretItemFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="176">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="177">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="178">data to be passed to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="delete" c:identifier="secret_item_delete">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="944">Delete this item.

This method returns immediately and completes asynchronously. The secret
service may prompt the user. secret_service_prompt() will be used to handle
any prompts that show up.</doc>
        <source-position filename="../libsecret/secret-item.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="946">an item</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="947">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="948">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="949">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_finish"
              c:identifier="secret_item_delete_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="979">Complete asynchronous operation to delete the secret item.</doc>
        <source-position filename="../libsecret/secret-item.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="987">whether the item was successfully deleted or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="981">an item</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="982">asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_sync"
              c:identifier="secret_item_delete_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="1009">Delete this secret item.

This method may block indefinitely and should not be used in user
interface threads. The secret service may prompt the user.
secret_service_prompt() will be used to handle any prompts that show up.</doc>
        <source-position filename="../libsecret/secret-item.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="1021">whether the item was successfully deleted or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1011">an item</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1012">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attributes" c:identifier="secret_item_get_attributes">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="1813">Set the attributes of this item.

The @attributes are a mapping of string keys to string values.
Attributes are used to search for items. Attributes are not stored
or transferred securely by the secret service.

Do not modify the attributes returned by this method. Use
secret_item_set_attributes() instead.</doc>
        <source-position filename="../libsecret/secret-item.h" line="152"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="1826">a new reference
         to the attributes, which should not be modified, and
         released with g_hash_table_unref()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1815">an item</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_created" c:identifier="secret_item_get_created">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="2084">Get the created date and time of the item. The return value is
the number of seconds since the unix epoch, January 1st 1970.</doc>
        <source-position filename="../libsecret/secret-item.h" line="190"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="2091">the created date and time</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="2086">an item</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="secret_item_get_flags">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="1050">Get the flags representing what features of the #SecretItem proxy
have been initialized.

Use secret_item_load_secret() to initialize further features
and change the flags.</doc>
        <source-position filename="../libsecret/secret-item.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="1060">the flags for features initialized</doc>
          <type name="ItemFlags" c:type="SecretItemFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1052">the secret item proxy</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label" c:identifier="secret_item_get_label">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="1953">Get the label of this item.</doc>
        <source-position filename="../libsecret/secret-item.h" line="171"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="1959">the label, which should be freed with g_free()</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1955">an item</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_locked" c:identifier="secret_item_get_locked">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="2056">Get whether the item is locked or not.

Depending on the secret service an item may not be able to be locked
independently from the collection that it is in.</doc>
        <source-position filename="../libsecret/secret-item.h" line="188"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="2065">whether the item is locked or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="2058">an item</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modified" c:identifier="secret_item_get_modified">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="2110">Get the modified date and time of the item. The return value is
the number of seconds since the unix epoch, January 1st 1970.</doc>
        <source-position filename="../libsecret/secret-item.h" line="192"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="2117">the modified date and time</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="2112">an item</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_schema_name"
              c:identifier="secret_item_get_schema_name">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="1787">Gets the name of the schema that this item was stored with. This is also
available at the &lt;literal&gt;xdg:schema&lt;/literal&gt; attribute.</doc>
        <source-position filename="../libsecret/secret-item.h" line="150"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="1794">the schema name</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1789">an item</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_secret" c:identifier="secret_item_get_secret">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="1096">Get the secret value of this item. If this item is locked or the secret
has not yet been loaded then this will return %NULL.

To load the secret call the secret_item_load_secret() method.</doc>
        <source-position filename="../libsecret/secret-item.h" line="108"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="1105">the secret value which should be
         released with secret_value_unref(), or %NULL</doc>
          <type name="Value" c:type="SecretValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1098">an item</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_service" c:identifier="secret_item_get_service">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="1080">Get the Secret Service object that this item was created with.</doc>
        <source-position filename="../libsecret/secret-item.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="1086">the Secret Service object</doc>
          <type name="Service" c:type="SecretService*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1082">an item</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_secret" c:identifier="secret_item_load_secret">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="1207">Load the secret value of this item.

Each item has a single secret which might be a password or some
other secret binary value.

This function will fail if the secret item is locked.

This function returns immediately and completes asynchronously.</doc>
        <source-position filename="../libsecret/secret-item.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1209">an item proxy</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1210">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1211">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1212">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_secret_finish"
              c:identifier="secret_item_load_secret_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="1248">Complete asynchronous operation to load the secret value of this item.

The newly loaded secret value can be accessed by calling
secret_item_get_secret().</doc>
        <source-position filename="../libsecret/secret-item.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="1259">whether the secret item successfully loaded or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1250">an item proxy</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1251">asynchronous result passed to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_secret_sync"
              c:identifier="secret_item_load_secret_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="1278">Load the secret value of this item.

Each item has a single secret which might be a password or some
other secret binary value.

This function may block indefinitely. Use the asynchronous version
in user interface threads.</doc>
        <source-position filename="../libsecret/secret-item.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="1292">whether the secret item successfully loaded or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1280">an item</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1281">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh" c:identifier="secret_item_refresh">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="610">Refresh the properties on this item. This fires off a request to
refresh, and the properties will be updated later.

Calling this method is not normally necessary, as the secret service
will notify the client when properties change.</doc>
        <source-position filename="../libsecret/secret-item.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="612">the collection</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_attributes" c:identifier="secret_item_set_attributes">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="1847">Set the attributes of this item.

The @attributes are a mapping of string keys to string values.
Attributes are used to search for items. Attributes are not stored
or transferred securely by the secret service.

This function returns immediately and completes asynchronously.</doc>
        <source-position filename="../libsecret/secret-item.h" line="154"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1849">an item</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
          <parameter name="schema"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1850">the schema for the attributes</doc>
            <type name="Schema" c:type="const SecretSchema*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1851">a new set of attributes</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1852">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1853">called when the asynchronous operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1854">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_attributes_finish"
              c:identifier="secret_item_set_attributes_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="1889">Complete operation to set the attributes of this item.</doc>
        <source-position filename="../libsecret/secret-item.h" line="161"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="1897">whether the change was successful or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1891">an item</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1892">asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_attributes_sync"
              c:identifier="secret_item_set_attributes_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="1911">Set the attributes of this item.

The @attributes are a mapping of string keys to string values.
Attributes are used to search for items. Attributes are not stored
or transferred securely by the secret service.

This function may block indefinitely. Use the asynchronous version
in user interface threads.</doc>
        <source-position filename="../libsecret/secret-item.h" line="165"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="1928">whether the change was successful or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1913">an item</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
          <parameter name="schema"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1914">the schema for the attributes</doc>
            <type name="Schema" c:type="const SecretSchema*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1915">a new set of attributes</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1916">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label" c:identifier="secret_item_set_label">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="1978">Set the label of this item.

This function returns immediately and completes asynchronously.</doc>
        <source-position filename="../libsecret/secret-item.h" line="173"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1980">an item</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1981">a new label</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1982">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1983">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1984">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label_finish"
              c:identifier="secret_item_set_label_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="2006">Complete asynchronous operation to set the label of this collection.</doc>
        <source-position filename="../libsecret/secret-item.h" line="179"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="2014">whether the change was successful or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="2008">an item</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="2009">asynchronous result passed to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label_sync"
              c:identifier="secret_item_set_label_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="2028">Set the label of this item.

This function may block indefinitely. Use the asynchronous version
in user interface threads.</doc>
        <source-position filename="../libsecret/secret-item.h" line="183"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="2040">whether the change was successful or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="2030">an item</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="2031">a new label</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="2032">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_secret" c:identifier="secret_item_set_secret">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="1672">Set the secret value of this item.

Each item has a single secret which might be a password or some
other secret binary value.

This function returns immediately and completes asynchronously.</doc>
        <source-position filename="../libsecret/secret-item.h" line="135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1674">an item</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1675">a new secret value</doc>
            <type name="Value" c:type="SecretValue*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1676">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1677">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1678">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_secret_finish"
              c:identifier="secret_item_set_secret_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="1715">Complete asynchronous operation to set the secret value of this item.</doc>
        <source-position filename="../libsecret/secret-item.h" line="141"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="1723">whether the change was successful or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1717">an item</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1718">asynchronous result passed to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_secret_sync"
              c:identifier="secret_item_set_secret_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="1742">Set the secret value of this item.

Each item has a single secret which might be a password or some
other secret binary value.

This function may block indefinitely. Use the asynchronous version
in user interface threads.</doc>
        <source-position filename="../libsecret/secret-item.h" line="145"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-item.c"
               line="1757">whether the change was successful or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1744">an item</doc>
            <type name="Item" c:type="SecretItem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1745">a new secret value</doc>
            <type name="Value" c:type="SecretValue*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-item.c"
                 line="1746">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="flags"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="347">A set of flags describing which parts of the secret item have
been initialized.</doc>
        <type name="ItemFlags"/>
      </property>
      <property name="locked" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="377">Whether the item is locked or not. An item may not be independently
lockable separate from other items in its collection.

To lock or unlock a item use the secret_service_lock() or
secret_service_unlock() functions.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="service"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="337">The #SecretService object that this item is associated with and
uses to interact with the actual D-Bus Secret Service.</doc>
        <type name="Service"/>
      </property>
      <field name="parent_instance">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="pv" readable="0" private="1">
        <type name="ItemPrivate" c:type="SecretItemPrivate*"/>
      </field>
    </class>
    <record name="ItemClass"
            c:type="SecretItemClass"
            glib:is-gtype-struct-for="Item">
      <doc xml:space="preserve"
           filename="../libsecret/secret-item.c"
           line="64">The class for #SecretItem.</doc>
      <source-position filename="../libsecret/secret-item.h" line="63"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="66">the parent class</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="ItemCreateFlags"
              glib:type-name="SecretItemCreateFlags"
              glib:get-type="secret_item_create_flags_get_type"
              c:type="SecretItemCreateFlags">
      <doc xml:space="preserve"
           filename="../libsecret/secret-item.c"
           line="79">Flags for secret_item_create().</doc>
      <member name="none"
              value="0"
              c:identifier="SECRET_ITEM_CREATE_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="81">no flags</doc>
      </member>
      <member name="replace"
              value="2"
              c:identifier="SECRET_ITEM_CREATE_REPLACE"
              glib:nick="replace">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="82">replace an item with the same attributes.</doc>
      </member>
    </bitfield>
    <bitfield name="ItemFlags"
              glib:type-name="SecretItemFlags"
              glib:get-type="secret_item_flags_get_type"
              c:type="SecretItemFlags">
      <doc xml:space="preserve"
           filename="../libsecret/secret-item.c"
           line="71">Flags which determine which parts of the #SecretItem proxy are initialized.</doc>
      <member name="none"
              value="0"
              c:identifier="SECRET_ITEM_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="73">no flags</doc>
      </member>
      <member name="load_secret"
              value="2"
              c:identifier="SECRET_ITEM_LOAD_SECRET"
              glib:nick="load-secret">
        <doc xml:space="preserve"
             filename="../libsecret/secret-item.c"
             line="74">a secret has been (or should be) loaded for #SecretItem</doc>
      </member>
    </bitfield>
    <record name="ItemPrivate" c:type="SecretItemPrivate" disguised="1">
      <source-position filename="../libsecret/secret-item.h" line="49"/>
    </record>
    <constant name="MAJOR_VERSION" value="0" c:type="SECRET_MAJOR_VERSION">
      <doc xml:space="preserve"
           filename="../libsecret/secret-version.h"
           line="30">The major version of libsecret.</doc>
      <source-position filename="../libsecret/secret-version.h" line="35"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MICRO_VERSION" value="1" c:type="SECRET_MICRO_VERSION">
      <doc xml:space="preserve"
           filename="../libsecret/secret-version.h"
           line="44">The micro version of libsecret.</doc>
      <source-position filename="../libsecret/secret-version.h" line="49"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="19" c:type="SECRET_MINOR_VERSION">
      <doc xml:space="preserve"
           filename="../libsecret/secret-version.h"
           line="37">The minor version of libsecret.</doc>
      <source-position filename="../libsecret/secret-version.h" line="42"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Prompt"
           c:symbol-prefix="prompt"
           c:type="SecretPrompt"
           parent="Gio.DBusProxy"
           glib:type-name="SecretPrompt"
           glib:get-type="secret_prompt_get_type"
           glib:type-struct="PromptClass">
      <doc xml:space="preserve"
           filename="../libsecret/secret-prompt.c"
           line="44">A proxy object representing a prompt that the Secret Service will display
to the user.</doc>
      <source-position filename="../libsecret/secret-prompt.h" line="51"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <method name="perform" c:identifier="secret_prompt_perform">
        <doc xml:space="preserve"
             filename="../libsecret/secret-prompt.c"
             line="408">Runs a prompt and performs the prompting. Returns %TRUE if the prompt
was completed and not dismissed.

If @window_id is non-null then it is used as an XWindow id on Linux. The API
expects this id to be converted to a string using the &lt;literal&gt;%d&lt;/literal&gt;
printf format. The Secret Service can make its prompt transient for the window
with this id. In some Secret Service implementations this is not possible, so
the behavior depending on this should degrade gracefully.

This method will return immediately and complete asynchronously.</doc>
        <source-position filename="../libsecret/secret-prompt.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-prompt.c"
                 line="410">a prompt</doc>
            <type name="Prompt" c:type="SecretPrompt*"/>
          </instance-parameter>
          <parameter name="window_id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-prompt.c"
                 line="411">string form of XWindow id for parent window to be transient for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="return_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-prompt.c"
                 line="412">the variant type of the prompt result</doc>
            <type name="GLib.VariantType" c:type="const GVariantType*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-prompt.c"
                 line="413">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-prompt.c"
                 line="414">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-prompt.c"
                 line="415">data to be passed to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="perform_finish"
              c:identifier="secret_prompt_perform_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-prompt.c"
             line="498">Complete asynchronous operation to run a prompt and perform the prompting.

Returns a variant result if the prompt was completed and not dismissed. The
type of result depends on the action the prompt is completing, and is
defined in the Secret Service DBus API specification.</doc>
        <source-position filename="../libsecret/secret-prompt.h" line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-prompt.c"
               line="510">%NULL if the prompt was dismissed or an error occurred,
         a variant result if the prompt was successful</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-prompt.c"
                 line="500">a prompt</doc>
            <type name="Prompt" c:type="SecretPrompt*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-prompt.c"
                 line="501">the asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="perform_sync"
              c:identifier="secret_prompt_perform_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-prompt.c"
             line="180">Runs a prompt and performs the prompting. Returns a variant result if the
prompt was completed and not dismissed. The type of result depends on the
action the prompt is completing, and is defined in the Secret Service DBus
API specification.

If @window_id is non-null then it is used as an XWindow id on Linux. The API
expects this id to be converted to a string using the &lt;literal&gt;%d&lt;/literal&gt;
printf format. The Secret Service can make its prompt transient for the window
with this id. In some Secret Service implementations this is not possible,
so the behavior depending on this should degrade gracefully.

This method may block indefinitely and should not be used in user interface
threads.</doc>
        <source-position filename="../libsecret/secret-prompt.h" line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-prompt.c"
               line="202">%NULL if the prompt was dismissed or an error occurred</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-prompt.c"
                 line="182">a prompt</doc>
            <type name="Prompt" c:type="SecretPrompt*"/>
          </instance-parameter>
          <parameter name="window_id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-prompt.c"
                 line="183">string form of XWindow id for parent window to be transient for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-prompt.c"
                 line="184">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="return_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-prompt.c"
                 line="185">the variant type of the prompt result</doc>
            <type name="GLib.VariantType" c:type="const GVariantType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="run" c:identifier="secret_prompt_run" throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-prompt.c"
             line="120">Runs a prompt and performs the prompting. Returns a variant result if the
prompt was completed and not dismissed. The type of result depends on the
action the prompt is completing, and is defined in the Secret Service DBus
API specification.

If @window_id is non-null then it is used as an XWindow id on Linux. The API
expects this id to be converted to a string using the &lt;literal&gt;%d&lt;/literal&gt;
printf format. The Secret Service can make its prompt transient for the window
with this id. In some Secret Service implementations this is not possible, so
the behavior depending on this should degrade gracefully.

This runs the dialog in a recursive mainloop. When run from a user interface
thread, this means the user interface will remain responsive. Care should be
taken that appropriate user interface actions are disabled while running the
prompt.</doc>
        <source-position filename="../libsecret/secret-prompt.h" line="55"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-prompt.c"
               line="144">%NULL if the prompt was dismissed or an error occurred</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-prompt.c"
                 line="122">a prompt</doc>
            <type name="Prompt" c:type="SecretPrompt*"/>
          </instance-parameter>
          <parameter name="window_id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-prompt.c"
                 line="123">string form of XWindow id for parent window to be transient for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-prompt.c"
                 line="124">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="return_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-prompt.c"
                 line="125">the variant type of the prompt result</doc>
            <type name="GLib.VariantType" c:type="const GVariantType*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="pv" readable="0" private="1">
        <type name="PromptPrivate" c:type="SecretPromptPrivate*"/>
      </field>
    </class>
    <record name="PromptClass"
            c:type="SecretPromptClass"
            glib:is-gtype-struct-for="Prompt">
      <doc xml:space="preserve"
           filename="../libsecret/secret-prompt.c"
           line="51">The class for #SecretPrompt.</doc>
      <source-position filename="../libsecret/secret-prompt.h" line="51"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../libsecret/secret-prompt.c"
             line="53">the parent class</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="PromptPrivate" c:type="SecretPromptPrivate" disguised="1">
      <source-position filename="../libsecret/secret-prompt.h" line="37"/>
    </record>
    <interface name="Retrievable"
               c:symbol-prefix="retrievable"
               c:type="SecretRetrievable"
               version="0.19.0"
               glib:type-name="SecretRetrievable"
               glib:get-type="secret_retrievable_get_type"
               glib:type-struct="RetrievableInterface">
      <doc xml:space="preserve"
           filename="../libsecret/secret-retrievable.c"
           line="35">An object representing a read-only view of a secret item in the
Secret Service.</doc>
      <source-position filename="../libsecret/secret-retrievable.h" line="41"/>
      <virtual-method name="retrieve_secret"
                      invoker="retrieve_secret"
                      version="0.19.0">
        <doc xml:space="preserve"
             filename="../libsecret/secret-retrievable.c"
             line="110">Retrieve the secret value of this object.

Each retrievable object has a single secret which might be a
password or some other secret binary value.

This function returns immediately and completes asynchronously.</doc>
        <source-position filename="../libsecret/secret-retrievable.h"
                         line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-retrievable.c"
                 line="112">a retrievable object</doc>
            <type name="Retrievable" c:type="SecretRetrievable*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-retrievable.c"
                 line="113">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-retrievable.c"
                 line="114">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-retrievable.c"
                 line="115">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="retrieve_secret_finish"
                      invoker="retrieve_secret_finish"
                      version="0.19.0"
                      throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-retrievable.c"
             line="140">Complete asynchronous operation to retrieve the secret value of this object.</doc>
        <source-position filename="../libsecret/secret-retrievable.h"
                         line="38"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-retrievable.c"
               line="148">the secret value which should be
         released with secret_value_unref(), or %NULL</doc>
          <type name="Value" c:type="SecretValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-retrievable.c"
                 line="142">a retrievable object</doc>
            <type name="Retrievable" c:type="SecretRetrievable*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-retrievable.c"
                 line="143">asynchronous result passed to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_attributes"
              c:identifier="secret_retrievable_get_attributes"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="../libsecret/secret-retrievable.c"
             line="215">Get the attributes of this object.

The attributes are a mapping of string keys to string values.
Attributes are used to search for items. Attributes are not stored
or transferred securely by the secret service.

Do not modify the attribute returned by this method.</doc>
        <source-position filename="../libsecret/secret-retrievable.h"
                         line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-retrievable.c"
               line="227">a new reference
         to the attributes, which should not be modified, and
         released with g_hash_table_unref()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-retrievable.c"
                 line="217">a retrievable object</doc>
            <type name="Retrievable" c:type="SecretRetrievable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_created"
              c:identifier="secret_retrievable_get_created"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="../libsecret/secret-retrievable.c"
             line="265">Get the created date and time of the object. The return value is
the number of seconds since the unix epoch, January 1st 1970.</doc>
        <source-position filename="../libsecret/secret-retrievable.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-retrievable.c"
               line="272">the created date and time</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-retrievable.c"
                 line="267">a retrievable object</doc>
            <type name="Retrievable" c:type="SecretRetrievable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label"
              c:identifier="secret_retrievable_get_label"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="../libsecret/secret-retrievable.c"
             line="244">Get the label of this item.</doc>
        <source-position filename="../libsecret/secret-retrievable.h"
                         line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-retrievable.c"
               line="250">the label, which should be freed with g_free()</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-retrievable.c"
                 line="246">a retrievable object</doc>
            <type name="Retrievable" c:type="SecretRetrievable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modified"
              c:identifier="secret_retrievable_get_modified"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="../libsecret/secret-retrievable.c"
             line="287">Get the modified date and time of the object. The return value is
the number of seconds since the unix epoch, January 1st 1970.</doc>
        <source-position filename="../libsecret/secret-retrievable.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-retrievable.c"
               line="294">the modified date and time</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-retrievable.c"
                 line="289">a retrievable object</doc>
            <type name="Retrievable" c:type="SecretRetrievable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="retrieve_secret"
              c:identifier="secret_retrievable_retrieve_secret"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="../libsecret/secret-retrievable.c"
             line="110">Retrieve the secret value of this object.

Each retrievable object has a single secret which might be a
password or some other secret binary value.

This function returns immediately and completes asynchronously.</doc>
        <source-position filename="../libsecret/secret-retrievable.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-retrievable.c"
                 line="112">a retrievable object</doc>
            <type name="Retrievable" c:type="SecretRetrievable*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-retrievable.c"
                 line="113">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-retrievable.c"
                 line="114">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-retrievable.c"
                 line="115">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="retrieve_secret_finish"
              c:identifier="secret_retrievable_retrieve_secret_finish"
              version="0.19.0"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-retrievable.c"
             line="140">Complete asynchronous operation to retrieve the secret value of this object.</doc>
        <source-position filename="../libsecret/secret-retrievable.h"
                         line="48"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-retrievable.c"
               line="148">the secret value which should be
         released with secret_value_unref(), or %NULL</doc>
          <type name="Value" c:type="SecretValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-retrievable.c"
                 line="142">a retrievable object</doc>
            <type name="Retrievable" c:type="SecretRetrievable*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-retrievable.c"
                 line="143">asynchronous result passed to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="retrieve_secret_sync"
              c:identifier="secret_retrievable_retrieve_secret_sync"
              version="0.19.0"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-retrievable.c"
             line="166">Retrieve the secret value of this object synchronously.

Each retrievable object has a single secret which might be a
password or some other secret binary value.

This method may block indefinitely and should not be used in user interface
threads.</doc>
        <source-position filename="../libsecret/secret-retrievable.h"
                         line="52"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-retrievable.c"
               line="180">the secret value which should be
         released with secret_value_unref(), or %NULL</doc>
          <type name="Value" c:type="SecretValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-retrievable.c"
                 line="168">a retrievable object</doc>
            <type name="Retrievable" c:type="SecretRetrievable*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-retrievable.c"
                 line="169">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="attributes"
                version="0.19.0"
                writable="1"
                transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsecret/secret-retrievable.c"
             line="62">The attributes set on this item. Attributes are used to locate an
item. They are not guaranteed to be stored or transferred securely.</doc>
        <type name="GLib.HashTable">
          <type name="utf8"/>
          <type name="utf8"/>
        </type>
      </property>
      <property name="created"
                version="0.19.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-retrievable.c"
             line="85">The date and time (in seconds since the UNIX epoch) that this
item was created.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="label"
                version="0.19.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-retrievable.c"
             line="74">The human readable label for the item.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="modified"
                version="0.19.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-retrievable.c"
             line="97">The date and time (in seconds since the UNIX epoch) that this
item was last modified.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
    </interface>
    <record name="RetrievableInterface"
            c:type="SecretRetrievableInterface"
            glib:is-gtype-struct-for="Retrievable"
            version="0.19.0">
      <doc xml:space="preserve"
           filename="../libsecret/secret-retrievable.c"
           line="44">The interface for #SecretRetrievable.</doc>
      <source-position filename="../libsecret/secret-retrievable.h" line="41"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="../libsecret/secret-retrievable.c"
             line="46">the parent interface</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="retrieve_secret">
        <callback name="retrieve_secret">
          <source-position filename="../libsecret/secret-retrievable.h"
                           line="34"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsecret/secret-retrievable.c"
                   line="112">a retrievable object</doc>
              <type name="Retrievable" c:type="SecretRetrievable*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../libsecret/secret-retrievable.c"
                   line="113">optional cancellation object</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="../libsecret/secret-retrievable.c"
                   line="114">called when the operation completes</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="../libsecret/secret-retrievable.c"
                   line="115">data to pass to the callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="retrieve_secret_finish">
        <callback name="retrieve_secret_finish" throws="1">
          <source-position filename="../libsecret/secret-retrievable.h"
                           line="38"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-retrievable.c"
                 line="148">the secret value which should be
         released with secret_value_unref(), or %NULL</doc>
            <type name="Value" c:type="SecretValue*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsecret/secret-retrievable.c"
                   line="142">a retrievable object</doc>
              <type name="Retrievable" c:type="SecretRetrievable*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsecret/secret-retrievable.c"
                   line="143">asynchronous result passed to callback</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="Schema"
            c:type="SecretSchema"
            stability="Stable"
            glib:type-name="SecretSchema"
            glib:get-type="secret_schema_get_type"
            c:symbol-prefix="schema">
      <doc xml:space="preserve"
           filename="../libsecret/secret-schema.c"
           line="67">Represents a set of attributes that are stored with an item. These schemas
are used for interoperability between various services storing the same types
of items.

Each schema has a name like "org.gnome.keyring.NetworkPassword", and defines
a set of attributes, and types (string, integer, boolean) for those attributes.

Attributes are stored as strings in the Secret Service, and the attribute
types simply define standard ways to store integer and boolean values as strings.
Attributes are represented in libsecret via a #GHashTable with string keys and
values. Even for values that defined as an integer or boolean in the schema,
the attribute values in the #GHashTable are strings. Boolean values are stored
as the strings 'true' and 'false'. Integer values are stored in decimal, with
a preceding negative sign for negative integers.

Schemas are handled entirely on the client side by this library. The name of the
schema is automatically stored as an attribute on the item.

Normally when looking up passwords only those with matching schema names are
returned. If the schema @flags contain the %SECRET_SCHEMA_DONT_MATCH_NAME flag,
then lookups will not check that the schema name matches that on the item, only
the schema's attributes are matched. This is useful when you are looking up items
that are not stored by the libsecret library. Other libraries such as libgnome-keyring
don't store the schema name.</doc>
      <source-position filename="../libsecret/secret-schema.h" line="57"/>
      <field name="name" writable="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-schema.c"
             line="69">the dotted name of the schema</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="flags" writable="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-schema.c"
             line="70">flags for the schema</doc>
        <type name="SchemaFlags" c:type="SecretSchemaFlags"/>
      </field>
      <field name="attributes" writable="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-schema.c"
             line="71">the attribute names and types of those attributes</doc>
        <array zero-terminated="0" fixed-size="32">
          <type name="SchemaAttribute" c:type="SecretSchemaAttribute"/>
        </array>
      </field>
      <field name="reserved" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="reserved1" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="reserved2" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="reserved3" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="reserved4" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="reserved5" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="reserved6" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="reserved7" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <constructor name="new"
                   c:identifier="secret_schema_new"
                   shadowed-by="newv"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="../libsecret/secret-schema.c"
             line="235">Using this function is not normally necessary from C code.

A schema represents a set of attributes that are stored with an item. These
schemas are used for interoperability between various services storing the
same types of items.

Each schema has an @name like "org.gnome.keyring.NetworkPassword", and
defines a set of attributes names, and types (string, integer, boolean) for
those attributes.

The variable argument list should contain pairs of a) The attribute name as
a null-terminated string, followed by b) integers from the
#SecretSchemaAttributeType enumeration, representing the attribute type for
each attribute name. The list of attribtues should be terminated with a %NULL.

Normally when looking up passwords only those with matching schema names are
returned. If the schema @flags contain the %SECRET_SCHEMA_DONT_MATCH_NAME flag,
then lookups will not check that the schema name matches that on the item, only
the schema's attributes are matched. This is useful when you are looking up items
that are not stored by the libsecret library. Other libraries such as libgnome-keyring
don't store the schema name.</doc>
        <source-position filename="../libsecret/secret-schema.h" line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-schema.c"
               line="263">the new schema, which should be unreferenced with
         secret_schema_unref() when done</doc>
          <type name="Schema" c:type="SecretSchema*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-schema.c"
                 line="237">the dotted name of the schema</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-schema.c"
                 line="238">the flags for the schema</doc>
            <type name="SchemaFlags" c:type="SecretSchemaFlags"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-schema.c"
                 line="239">the attribute names and types, terminated with %NULL</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="newv" c:identifier="secret_schema_newv" shadows="new">
        <doc xml:space="preserve"
             filename="../libsecret/secret-schema.c"
             line="151">Using this function is not normally necessary from C code. This is useful
for constructing #SecretSchema structures in bindings.

A schema represents a set of attributes that are stored with an item. These
schemas are used for interoperability between various services storing the
same types of items.

Each schema has an @name like "org.gnome.keyring.NetworkPassword", and
defines a set of attributes names, and types (string, integer, boolean) for
those attributes.

Each key in the @attributes table should be a attribute name strings, and
the values in the table should be integers from the #SecretSchemaAttributeType
enumeration, representing the attribute type for each attribute name.

Normally when looking up passwords only those with matching schema names are
returned. If the schema @flags contain the %SECRET_SCHEMA_DONT_MATCH_NAME flag,
then lookups will not check that the schema name matches that on the item, only
the schema's attributes are matched. This is useful when you are looking up items
that are not stored by the libsecret library. Other libraries such as libgnome-keyring
don't store the schema name.</doc>
        <source-position filename="../libsecret/secret-schema.h" line="65"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-schema.c"
               line="179">the new schema, which should be unreferenced with
         secret_schema_unref() when done</doc>
          <type name="Schema" c:type="SecretSchema*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-schema.c"
                 line="153">the dotted name of the schema</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-schema.c"
                 line="154">the flags for the schema</doc>
            <type name="SchemaFlags" c:type="SecretSchemaFlags"/>
          </parameter>
          <parameter name="attribute_names_and_types"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-schema.c"
                 line="155">the attribute names and types of those attributes</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="SchemaAttributeType"/>
            </type>
          </parameter>
        </parameters>
      </constructor>
      <method name="ref" c:identifier="secret_schema_ref">
        <doc xml:space="preserve"
             filename="../libsecret/secret-schema.c"
             line="296">Adds a reference to the #SecretSchema.

It is not normally necessary to call this function from C code, and is
mainly present for the sake of bindings. If the @schema was statically
allocated, then this function will copy the schema.</doc>
        <source-position filename="../libsecret/secret-schema.h" line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-schema.c"
               line="306">the referenced schema, which should be later
         unreferenced with secret_schema_unref()</doc>
          <type name="Schema" c:type="SecretSchema*"/>
        </return-value>
        <parameters>
          <instance-parameter name="schema" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-schema.c"
                 line="298">the schema to reference</doc>
            <type name="Schema" c:type="SecretSchema*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="secret_schema_unref">
        <doc xml:space="preserve"
             filename="../libsecret/secret-schema.c"
             line="344">Releases a reference to the #SecretSchema. If the last reference is
released then the schema will be freed.

It is not normally necessary to call this function from C code, and is
mainly present for the sake of bindings. It is an error to call this for
a @schema that was statically allocated.</doc>
        <source-position filename="../libsecret/secret-schema.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="schema" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-schema.c"
                 line="346">the schema to reference</doc>
            <type name="Schema" c:type="SecretSchema*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="SchemaAttribute"
            c:type="SecretSchemaAttribute"
            glib:type-name="SecretSchemaAttribute"
            glib:get-type="secret_schema_attribute_get_type"
            c:symbol-prefix="schema_attribute">
      <doc xml:space="preserve"
           filename="../libsecret/secret-schema.c"
           line="110">An attribute in a #SecretSchema.</doc>
      <source-position filename="../libsecret/secret-schema.h" line="36"/>
      <field name="name" writable="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-schema.c"
             line="112">name of the attribute</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="type" writable="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-schema.c"
             line="113">the type of the attribute</doc>
        <type name="SchemaAttributeType" c:type="SecretSchemaAttributeType"/>
      </field>
    </record>
    <enumeration name="SchemaAttributeType"
                 glib:type-name="SecretSchemaAttributeType"
                 glib:get-type="secret_schema_attribute_type_get_type"
                 c:type="SecretSchemaAttributeType">
      <doc xml:space="preserve"
           filename="../libsecret/secret-schema.c"
           line="118">The type of an attribute in a #SecretSchema. Attributes are stored as strings
in the Secret Service, and the attribute types simply define standard ways
to store integer and boolean values as strings.</doc>
      <member name="string"
              value="0"
              c:identifier="SECRET_SCHEMA_ATTRIBUTE_STRING"
              glib:nick="string">
        <doc xml:space="preserve"
             filename="../libsecret/secret-schema.c"
             line="122">a utf-8 string attribute</doc>
      </member>
      <member name="integer"
              value="1"
              c:identifier="SECRET_SCHEMA_ATTRIBUTE_INTEGER"
              glib:nick="integer">
        <doc xml:space="preserve"
             filename="../libsecret/secret-schema.c"
             line="121">an integer attribute, stored as a decimal</doc>
      </member>
      <member name="boolean"
              value="2"
              c:identifier="SECRET_SCHEMA_ATTRIBUTE_BOOLEAN"
              glib:nick="boolean">
        <doc xml:space="preserve"
             filename="../libsecret/secret-schema.c"
             line="120">a boolean attribute, stored as 'true' or 'false'</doc>
      </member>
    </enumeration>
    <bitfield name="SchemaFlags"
              glib:type-name="SecretSchemaFlags"
              glib:get-type="secret_schema_flags_get_type"
              c:type="SecretSchemaFlags">
      <doc xml:space="preserve"
           filename="../libsecret/secret-schema.c"
           line="101">Flags for a #SecretSchema definition.</doc>
      <member name="none"
              value="0"
              c:identifier="SECRET_SCHEMA_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-schema.c"
             line="103">no flags for the schema</doc>
      </member>
      <member name="dont_match_name"
              value="2"
              c:identifier="SECRET_SCHEMA_DONT_MATCH_NAME"
              glib:nick="dont-match-name">
        <doc xml:space="preserve"
             filename="../libsecret/secret-schema.c"
             line="104">don't match the schema name when looking up or
                                removing passwords</doc>
      </member>
    </bitfield>
    <enumeration name="SchemaType"
                 version="0.18.6"
                 glib:type-name="SecretSchemaType"
                 glib:get-type="secret_schema_type_get_type"
                 c:type="SecretSchemaType">
      <doc xml:space="preserve"
           filename="../libsecret/secret-schemas.h"
           line="40">Different types of schemas for storing secrets, intended for use with
secret_get_schema().</doc>
      <member name="note"
              value="0"
              c:identifier="SECRET_SCHEMA_TYPE_NOTE"
              glib:nick="note">
        <doc xml:space="preserve"
             filename="../libsecret/secret-schemas.h"
             line="42">Personal passwords; see %SECRET_SCHEMA_NOTE</doc>
      </member>
      <member name="compat_network"
              value="1"
              c:identifier="SECRET_SCHEMA_TYPE_COMPAT_NETWORK"
              glib:nick="compat-network">
        <doc xml:space="preserve"
             filename="../libsecret/secret-schemas.h"
             line="43">Network passwords from older
   libgnome-keyring storage; see %SECRET_SCHEMA_COMPAT_NETWORK</doc>
      </member>
    </enumeration>
    <bitfield name="SearchFlags"
              glib:type-name="SecretSearchFlags"
              glib:get-type="secret_search_flags_get_type"
              c:type="SecretSearchFlags">
      <doc xml:space="preserve"
           filename="../libsecret/secret-methods.c"
           line="29">Various flags to be used with secret_service_search() and secret_service_search_sync().</doc>
      <member name="none"
              value="0"
              c:identifier="SECRET_SEARCH_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="31">no flags</doc>
      </member>
      <member name="all"
              value="2"
              c:identifier="SECRET_SEARCH_ALL"
              glib:nick="all">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="32">all the items matching the search will be returned, instead of just the first one</doc>
      </member>
      <member name="unlock"
              value="4"
              c:identifier="SECRET_SEARCH_UNLOCK"
              glib:nick="unlock">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="33">unlock locked items while searching</doc>
      </member>
      <member name="load_secrets"
              value="8"
              c:identifier="SECRET_SEARCH_LOAD_SECRETS"
              glib:nick="load-secrets">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="34">while searching load secrets for items that are not locked</doc>
      </member>
    </bitfield>
    <class name="Service"
           c:symbol-prefix="service"
           c:type="SecretService"
           parent="Gio.DBusProxy"
           glib:type-name="SecretService"
           glib:get-type="secret_service_get_type"
           glib:type-struct="ServiceClass">
      <doc xml:space="preserve"
           filename="../libsecret/secret-service.c"
           line="73">A proxy object representing the Secret Service.</doc>
      <source-position filename="../libsecret/secret-service.h" line="86"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <function name="disconnect" c:identifier="secret_service_disconnect">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="915">Disconnect the default #SecretService proxy returned by secret_service_get()
and secret_service_get_sync().

It is not necessary to call this function, but you may choose to do so at
program exit. It is useful for testing that memory is not leaked.

This function is safe to call at any time. But if other objects in this
library are still referenced, then this will not result in all memory
being freed.</doc>
        <source-position filename="../libsecret/secret-service.h" line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="get" c:identifier="secret_service_get">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="760">Get a #SecretService proxy for the Secret Service. If such a proxy object
already exists, then the same proxy is returned.

If @flags contains any flags of which parts of the secret service to
ensure are initialized, then those will be initialized before completing.

This method will return immediately and complete asynchronously.</doc>
        <source-position filename="../libsecret/secret-service.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="762">flags for which service functionality to ensure is initialized</doc>
            <type name="ServiceFlags" c:type="SecretServiceFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="763">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="764">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="765">data to be passed to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_finish"
                c:identifier="secret_service_get_finish"
                throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="815">Complete an asynchronous operation to get a #SecretService proxy for the
Secret Service.</doc>
        <source-position filename="../libsecret/secret-service.h" line="99"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-service.c"
               line="823">a new reference to a #SecretService proxy, which
         should be released with g_object_unref().</doc>
          <type name="Service" c:type="SecretService*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="817">the asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_sync"
                c:identifier="secret_service_get_sync"
                throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="864">Get a #SecretService proxy for the Secret Service. If such a proxy object
already exists, then the same proxy is returned.

If @flags contains any flags of which parts of the secret service to
ensure are initialized, then those will be initialized before returning.

This method may block indefinitely and should not be used in user interface
threads.</doc>
        <source-position filename="../libsecret/secret-service.h" line="102"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-service.c"
               line="879">a new reference to a #SecretService proxy, which
         should be released with g_object_unref().</doc>
          <type name="Service" c:type="SecretService*"/>
        </return-value>
        <parameters>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="866">flags for which service functionality to ensure is initialized</doc>
            <type name="ServiceFlags" c:type="SecretServiceFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="867">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </function>
      <function name="open" c:identifier="secret_service_open">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="934">Create a new #SecretService proxy for the Secret Service.

This function is rarely used, see secret_service_get() instead.

The @service_gtype argument should be set to %SECRET_TYPE_SERVICE or a the type
of a derived class.

If @flags contains any flags of which parts of the secret service to
ensure are initialized, then those will be initialized before returning.

If @service_bus_name is %NULL then the default is used.

This method will return immediately and complete asynchronously.</doc>
        <source-position filename="../libsecret/secret-service.h" line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="service_gtype" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="936">the GType of the new secret service</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="service_bus_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="937">the D-Bus service name of the secret service</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="938">flags for which service functionality to ensure is initialized</doc>
            <type name="ServiceFlags" c:type="SecretServiceFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="939">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="940">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="941">data to be passed to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="open_finish"
                c:identifier="secret_service_open_finish"
                throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="983">Complete an asynchronous operation to create a new #SecretService proxy for
the Secret Service.</doc>
        <source-position filename="../libsecret/secret-service.h" line="115"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-service.c"
               line="991">a new reference to a #SecretService proxy, which
         should be released with g_object_unref().</doc>
          <type name="Service" c:type="SecretService*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="985">the asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </function>
      <function name="open_sync"
                c:identifier="secret_service_open_sync"
                throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="1015">Create a new #SecretService proxy for the Secret Service.

This function is rarely used, see secret_service_get_sync() instead.

The @service_gtype argument should be set to %SECRET_TYPE_SERVICE or a the
type of a derived class.

If @flags contains any flags of which parts of the secret service to
ensure are initialized, then those will be initialized before returning.

If @service_bus_name is %NULL then the default is used.

This method may block indefinitely and should not be used in user interface
threads.</doc>
        <source-position filename="../libsecret/secret-service.h" line="118"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-service.c"
               line="1038">a new reference to a #SecretService proxy, which
         should be released with g_object_unref().</doc>
          <type name="Service" c:type="SecretService*"/>
        </return-value>
        <parameters>
          <parameter name="service_gtype" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1017">the GType of the new secret service</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="service_bus_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1018">the D-Bus service name of the secret service</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1019">flags for which service functionality to ensure is initialized</doc>
            <type name="ServiceFlags" c:type="SecretServiceFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1020">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_collection_gtype"
                      invoker="get_collection_gtype">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="1754">Get the GObject type for collections instantiated by this service.
This will always be either #SecretCollection or derived from it.</doc>
        <source-position filename="../libsecret/secret-service.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-service.c"
               line="1761">the gobject type for collections</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1756">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_item_gtype" invoker="get_item_gtype">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="1782">Get the GObject type for items instantiated by this service.
This will always be either #SecretItem or derived from it.</doc>
        <source-position filename="../libsecret/secret-service.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-service.c"
               line="1789">the gobject type for items</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1784">the service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prompt_async">
        <source-position filename="../libsecret/secret-service.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="prompt" transfer-ownership="none">
            <type name="Prompt" c:type="SecretPrompt*"/>
          </parameter>
          <parameter name="return_type" transfer-ownership="none">
            <type name="GLib.VariantType" c:type="const GVariantType*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="4">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prompt_finish" invoker="prompt_finish" throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="1722">Complete asynchronous operation to perform prompting for a #SecretPrompt.

Returns a variant result if the prompt was completed and not dismissed. The
type of result depends on the action the prompt is completing, and is defined
in the Secret Service DBus API specification.</doc>
        <source-position filename="../libsecret/secret-service.h" line="76"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-service.c"
               line="1734">%NULL if the prompt was dismissed or an error occurred,
         a variant result if the prompt was successful</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1724">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1725">the asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prompt_sync" invoker="prompt_sync" throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="1639">Perform prompting for a #SecretPrompt.

Runs a prompt and performs the prompting. Returns a variant result if the
prompt was completed and not dismissed. The type of result depends on the
action the prompt is completing, and is defined in the Secret Service DBus
API specification.

This function is called by other parts of this library to handle prompts
for the various actions that can require prompting.

Override the #SecretServiceClass &lt;literal&gt;prompt_sync&lt;/literal&gt; virtual method
to change the behavior of the prompting. The default behavior is to simply
run secret_prompt_perform_sync() on the prompt with a %NULL &lt;literal&gt;window_id&lt;/literal&gt;.</doc>
        <source-position filename="../libsecret/secret-service.h" line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-service.c"
               line="1661">%NULL if the prompt was dismissed or an error occurred,
         a variant result if the prompt was successful</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1641">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="prompt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1642">the prompt</doc>
            <type name="Prompt" c:type="SecretPrompt*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1643">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="return_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1644">the variant type of the prompt result</doc>
            <type name="GLib.VariantType" c:type="const GVariantType*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="clear" c:identifier="secret_service_clear">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="1671">Remove unlocked items which match the attributes from the secret service.

The @attributes should be a set of key and value string pairs.

If @service is NULL, then secret_service_get() will be called to get
the default #SecretService proxy.

This method will return immediately and complete asynchronously.</doc>
        <source-position filename="../libsecret/secret-service.h" line="266"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1673">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="schema"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1674">the schema for the attributes</doc>
            <type name="Schema" c:type="const SecretSchema*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1675">the attribute keys and values</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1676">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1677">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1678">data to be passed to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_finish"
              c:identifier="secret_service_clear_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="1736">Finish asynchronous operation to remove items from the secret
service.</doc>
        <source-position filename="../libsecret/secret-service.h" line="273"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-methods.c"
               line="1745">whether items were removed or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1738">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1739">the asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_sync"
              c:identifier="secret_service_clear_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="1768">Remove unlocked items which match the attributes from the secret service.

The @attributes should be a set of key and value string pairs.

If @service is NULL, then secret_service_get_sync() will be called to get
the default #SecretService proxy.

This method may block indefinitely and should not be used in user interface
threads.</doc>
        <source-position filename="../libsecret/secret-service.h" line="277"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-methods.c"
               line="1786">whether items were removed or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1770">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="schema"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1771">the schema for the attributes</doc>
            <type name="Schema" c:type="const SecretSchema*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1772">the attribute keys and values</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1773">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_collection_dbus_path"
              c:identifier="secret_service_create_collection_dbus_path"
              introspectable="0"
              stability="Unstable">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="1701">Create a new collection in the secret service, and return its path.

Using this method requires that you setup a correct hash table of D-Bus
properties for the new collection. You may prefer to use
secret_collection_create() which does handles this for you.

An @alias is a well-known tag for a collection, such as 'default' (ie: the
default collection to store items in). This allows other applications to
easily identify and share a collection. If a collection with the @alias
already exists, then instead of creating a new collection, the existing
collection will be returned. If no collection with this alias exists, then a
new collection will be created and this alias will be assigned to it.

@properties is a set of properties for the new collection. The keys in the
hash table should be interface.property strings like
&lt;literal&gt;org.freedesktop.Secret.Collection.Label&lt;/literal&gt;. The values
in the hash table should be #GVariant values of the properties.

If you wish to have a

This method will return immediately and complete asynchronously. The secret
service may prompt the user. secret_service_prompt() will be used to handle
any prompts that are required.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="203"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1703">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1704">hash table of properties for
             the new collection</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GLib.Variant"/>
            </type>
          </parameter>
          <parameter name="alias"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1706">an alias to check for before creating the new
        collection, or to assign to the new collection</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1708">not currently used</doc>
            <type name="CollectionCreateFlags"
                  c:type="SecretCollectionCreateFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1709">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1710">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1711">data to be passed to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_collection_dbus_path_finish"
              c:identifier="secret_service_create_collection_dbus_path_finish"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="1783">Finish asynchronous operation to create a new collection in the secret
service.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="211"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="1794">a new string containing the D-Bus object path
         of the collection</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1785">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1786">the asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_collection_dbus_path_sync"
              c:identifier="secret_service_create_collection_dbus_path_sync"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="1818">Create a new collection in the secret service and return its path.

Using this method requires that you setup a correct hash table of D-Bus
properties for the new collection. You may prefer to use
secret_collection_create() which does handles this for you.

An @alias is a well-known tag for a collection, such as 'default' (ie: the
default collection to store items in). This allows other applications to
easily identify and share a collection. If a collection with the @alias
already exists, then instead of creating a new collection, the existing
collection will be returned. If no collection with this alias exists, then
a new collection will be created and this alias will be assigned to it.

@properties is a set of properties for the new collection. The keys in the
hash table should be interface.property strings like
&lt;literal&gt;org.freedesktop.Secret.Collection.Label&lt;/literal&gt;. The values
in the hash table should be #GVariant values of the properties.

This method may block indefinitely and should not be used in user interface
threads. The secret service may prompt the user. secret_service_prompt()
will be used to handle any prompts that are required.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="215"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="1853">a new string containing the D-Bus object path
         of the collection</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1820">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1821">hash table of D-Bus properties
             for the new collection</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GLib.Variant"/>
            </type>
          </parameter>
          <parameter name="alias"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1823">an alias to check for before creating the new
        collection, or to assign to the new collection</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1825">not currently used</doc>
            <type name="CollectionCreateFlags"
                  c:type="SecretCollectionCreateFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1826">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_item_dbus_path"
              c:identifier="secret_service_create_item_dbus_path"
              introspectable="0"
              stability="Unstable">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="2004">Create a new item in a secret service collection and return its D-Bus
object path.

It is often easier to use secret_password_store() or secret_item_create()
rather than using this function. Using this method requires that you setup
a correct hash table of D-Bus @properties for the new collection.

If the @flags contains %SECRET_ITEM_CREATE_REPLACE, then the secret
service will search for an item matching the @attributes, and update that item
instead of creating a new one.

@properties is a set of properties for the new collection. The keys in the
hash table should be interface.property strings like
&lt;literal&gt;org.freedesktop.Secret.Item.Label&lt;/literal&gt;. The values
in the hash table should be #GVariant values of the properties.

This method will return immediately and complete asynchronously. The secret
service may prompt the user. secret_service_prompt() will be used to handle
any prompts that are required.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="222"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2006">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="collection_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2007">the D-Bus object path of the collection in which to create item</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2008">hash table of D-Bus properties
             for the new collection</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GLib.Variant"/>
            </type>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2010">the secret value to store in the item</doc>
            <type name="Value" c:type="SecretValue*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2011">flags for the creation of the new item</doc>
            <type name="ItemCreateFlags" c:type="SecretItemCreateFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2012">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2013">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2014">data to be passed to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_item_dbus_path_finish"
              c:identifier="secret_service_create_item_dbus_path_finish"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="2074">Finish asynchronous operation to create a new item in the secret
service.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="231"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="2085">a new string containing the D-Bus object path
         of the item</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2076">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2077">the asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_item_dbus_path_sync"
              c:identifier="secret_service_create_item_dbus_path_sync"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="2126">Create a new item in a secret service collection and return its D-Bus
object path.

It is often easier to use secret_password_store_sync() or secret_item_create_sync()
rather than using this function. Using this method requires that you setup
a correct hash table of D-Bus @properties for the new collection.

If the @flags contains %SECRET_ITEM_CREATE_REPLACE, then the secret
service will search for an item matching the @attributes, and update that item
instead of creating a new one.

@properties is a set of properties for the new collection. The keys in the
hash table should be interface.property strings like
&lt;literal&gt;org.freedesktop.Secret.Item.Label&lt;/literal&gt;. The values
in the hash table should be #GVariant values of the properties.

This method may block indefinitely and should not be used in user interface
threads. The secret service may prompt the user. secret_service_prompt()
will be used to handle any prompts that are required.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="235"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="2159">a new string containing the D-Bus object path
         of the item</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2128">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="collection_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2129">the D-Bus path of the collection in which to create item</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2130">hash table of D-Bus properties
             for the new collection</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GLib.Variant"/>
            </type>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2132">the secret value to store in the item</doc>
            <type name="Value" c:type="SecretValue*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2133">flags for the creation of the new item</doc>
            <type name="ItemCreateFlags" c:type="SecretItemCreateFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2134">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="decode_dbus_secret"
              c:identifier="secret_service_decode_dbus_secret">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="2585">Decode a #SecretValue into GVariant received with the Secret Service
DBus API.

The GVariant should have a &lt;literal&gt;(oayays)&lt;/literal&gt; signature.

A session must have already been established by the #SecretService, and
the encoded secret must be valid for that session.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="278"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="2598">the decoded secret value</doc>
          <type name="Value" c:type="SecretValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2587">the service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2588">the encoded secret</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_item_dbus_path"
              c:identifier="secret_service_delete_item_dbus_path"
              introspectable="0"
              stability="Unstable">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="1530">Delete a secret item from the secret service.

The item is represented by its D-Bus object path. If you already have a
#SecretItem proxy objects, use use secret_item_delete() instead.

This method will return immediately and complete asynchronously.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="188"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1532">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="item_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1533">the D-Bus path of item to delete</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1534">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1535">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1536">data to be passed to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_item_dbus_path_finish"
              c:identifier="secret_service_delete_item_dbus_path_finish"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="1561">Complete an asynchronous operation to delete a secret item from the secret
service.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="194"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="1572">whether the deletion was successful or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1563">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1564">the asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_item_dbus_path_sync"
              c:identifier="secret_service_delete_item_dbus_path_sync"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="1582">Delete a secret item from the secret service.

The item is represented by its D-Bus object path. If you already have a
#SecretItem proxy objects, use use secret_item_delete_sync() instead.

This method may block indefinitely and should not be used in user interface
threads.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="198"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="1599">whether the deletion was successful or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1584">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="item_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1585">the D-Bus path of item to delete</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1586">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="encode_dbus_secret"
              c:identifier="secret_service_encode_dbus_secret">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="2556">Encodes a #SecretValue into GVariant for use with the Secret Service
DBus API.

The resulting GVariant will have a &lt;literal&gt;(oayays)&lt;/literal&gt; signature.

A session must have already been established by the #SecretService.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="275"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="2568">the encoded secret</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2558">the service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2559">the secret value</doc>
            <type name="Value" c:type="SecretValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ensure_session"
              c:identifier="secret_service_ensure_session">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="1262">Ensure that the #SecretService proxy has established a session with the
Secret Service. This session is used to transfer secrets.

It is not normally necessary to call this method, as the session is
established as necessary. You can also pass the %SECRET_SERVICE_OPEN_SESSION
to secret_service_get() in order to ensure that a session has been established
by the time you get the #SecretService proxy.

This method will return immediately and complete asynchronously.</doc>
        <source-position filename="../libsecret/secret-service.h" line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1264">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1265">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1266">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1267">data to be passed to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="ensure_session_finish"
              c:identifier="secret_service_ensure_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="1306">Finish an asynchronous operation to ensure that the #SecretService proxy
has established a session with the Secret Service.</doc>
        <source-position filename="../libsecret/secret-service.h" line="135"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-service.c"
               line="1315">whether a session is established or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1308">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1309">the asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ensure_session_sync"
              c:identifier="secret_service_ensure_session_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="1335">Ensure that the #SecretService proxy has established a session with the
Secret Service. This session is used to transfer secrets.

It is not normally necessary to call this method, as the session is
established as necessary. You can also pass the %SECRET_SERVICE_OPEN_SESSION
to secret_service_get_sync() in order to ensure that a session has been
established by the time you get the #SecretService proxy.

This method may block indefinitely and should not be used in user interface
threads.</doc>
        <source-position filename="../libsecret/secret-service.h" line="139"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-service.c"
               line="1352">whether a session is established or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1337">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1338">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_collection_gtype"
              c:identifier="secret_service_get_collection_gtype">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="1754">Get the GObject type for collections instantiated by this service.
This will always be either #SecretCollection or derived from it.</doc>
        <source-position filename="../libsecret/secret-service.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-service.c"
               line="1761">the gobject type for collections</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1756">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_collections"
              c:identifier="secret_service_get_collections">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="1096">Get a list of #SecretCollection objects representing all the collections
in the secret service.

If the %SECRET_SERVICE_LOAD_COLLECTIONS flag was not specified when
initializing #SecretService proxy object, then this method will return
%NULL. Use secret_service_load_collections() to load the collections.</doc>
        <source-position filename="../libsecret/secret-service.h" line="128"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-service.c"
               line="1107">a
         list of the collections in the secret service</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Collection"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1098">the secret service proxy</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="secret_service_get_flags">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="1065">Get the flags representing what features of the #SecretService proxy
have been initialized.

Use secret_service_ensure_session() or secret_service_load_collections()
to initialize further features and change the flags.</doc>
        <source-position filename="../libsecret/secret-service.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-service.c"
               line="1075">the flags for features initialized</doc>
          <type name="ServiceFlags" c:type="SecretServiceFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1067">the secret service proxy</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_item_gtype"
              c:identifier="secret_service_get_item_gtype">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="1782">Get the GObject type for items instantiated by this service.
This will always be either #SecretItem or derived from it.</doc>
        <source-position filename="../libsecret/secret-service.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-service.c"
               line="1789">the gobject type for items</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1784">the service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_secret_for_dbus_path"
              c:identifier="secret_service_get_secret_for_dbus_path"
              introspectable="0"
              stability="Unstable">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="728">Get the secret value for a secret item stored in the service.

The item is represented by its D-Bus object path. If you already have a
#SecretItem proxy object, use use secret_item_get_secret() to more simply
get its secret value.

This function returns immediately and completes asynchronously.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="730">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="item_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="731">the D-Bus path to item to retrieve secret for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="732">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="733">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="734">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_secret_for_dbus_path_finish"
              c:identifier="secret_service_get_secret_for_dbus_path_finish"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="773">Complete asynchronous operation to get the secret value for an
secret item stored in the service.

Will return %NULL if the item is locked.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="113"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="786">the newly allocated secret value
         for the item, which should be released with secret_value_unref()</doc>
          <type name="Value" c:type="SecretValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="775">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="776">asynchronous result passed to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_secret_for_dbus_path_sync"
              c:identifier="secret_service_get_secret_for_dbus_path_sync"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="811">Get the secret value for a secret item stored in the service.

The item is represented by its D-Bus object path. If you already have a
#SecretItem proxy object, use use secret_item_load_secret_sync() to more simply
get its secret value.

This method may block indefinitely and should not be used in user interface
threads.

Will return %NULL if the item is locked.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="117"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="831">the newly allocated secret value
         for the item, which should be released with secret_value_unref()</doc>
          <type name="Value" c:type="SecretValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="813">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="item_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="814">the D-Bus path to item to retrieve secret for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="815">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_secrets_for_dbus_paths"
              c:identifier="secret_service_get_secrets_for_dbus_paths"
              introspectable="0"
              stability="Unstable">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="864">Get the secret values for a secret item stored in the service.

The items are represented by their D-Bus object paths. If you already have
#SecretItem proxy objects, use use secret_item_load_secrets() to more simply
get their secret values.

This function returns immediately and completes asynchronously.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="866">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="item_paths" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="867">the D-Bus paths to items to retrieve secrets for</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="868">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="869">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="870">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_secrets_for_dbus_paths_finish"
              c:identifier="secret_service_get_secrets_for_dbus_paths_finish"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="909">Complete asynchronous operation to get the secret values for an
secret items stored in the service.

Items that are locked will not be included the results.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="128"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="922">a newly
         allocated hash table of item_path keys to #SecretValue
         values.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="Value"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="911">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="912">asynchronous result passed to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_secrets_for_dbus_paths_sync"
              c:identifier="secret_service_get_secrets_for_dbus_paths_sync"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="948">Get the secret values for a secret item stored in the service.

The items are represented by their D-Bus object paths. If you already have
#SecretItem proxy objects, use use secret_item_load_secrets_sync() to more
simply get their secret values.

This method may block indefinitely and should not be used in user interface
threads.

Items that are locked will not be included the results.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="132"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="968">a newly
         allocated hash table of item_path keys to #SecretValue
         values.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="Value"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="950">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="item_paths" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="951">the D-Bus paths to items to retrieve secrets for</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="952">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_session_algorithms"
              c:identifier="secret_service_get_session_algorithms">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="1202">Get the set of algorithms being used to transfer secrets between this
secret service proxy and the Secret Service itself.

This will be %NULL if no session has been established. Use
secret_service_ensure_session() to establish a session.</doc>
        <source-position filename="../libsecret/secret-service.h" line="126"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-service.c"
               line="1212">a string representing the algorithms for transferring
         secrets</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1204">the secret service proxy</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_session_dbus_path"
              c:identifier="secret_service_get_session_dbus_path">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="1232">Get the D-Bus object path of the session object being used to transfer
secrets between this secret service proxy and the Secret Service itself.

This will be %NULL if no session has been established. Use
secret_service_ensure_session() to establish a session.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="84"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-service.c"
               line="1242">a string representing the D-Bus object path of the
         session</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1234">the secret service proxy</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_collections"
              c:identifier="secret_service_load_collections">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="1475">Ensure that the #SecretService proxy has loaded all the collections present
in the Secret Service. This affects the result of
secret_service_get_collections().

You can also pass the %SECRET_SERVICE_LOAD_COLLECTIONS to
secret_service_get_sync() in order to ensure that the collections have been
loaded by the time you get the #SecretService proxy.

This method will return immediately and complete asynchronously.</doc>
        <source-position filename="../libsecret/secret-service.h" line="143"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1477">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1478">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1479">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1480">data to be passed to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_collections_finish"
              c:identifier="secret_service_load_collections_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="1543">Complete an asynchronous operation to ensure that the #SecretService proxy
has loaded all the collections present in the Secret Service.</doc>
        <source-position filename="../libsecret/secret-service.h" line="148"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-service.c"
               line="1552">whether the load was successful or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1545">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1546">the asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_collections_sync"
              c:identifier="secret_service_load_collections_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="1573">Ensure that the #SecretService proxy has loaded all the collections present
in the Secret Service. This affects the result of
secret_service_get_collections().

You can also pass the %SECRET_SERVICE_LOAD_COLLECTIONS to
secret_service_get_sync() in order to ensure that the collections have been
loaded by the time you get the #SecretService proxy.

This method may block indefinitely and should not be used in user interface
threads.</doc>
        <source-position filename="../libsecret/secret-service.h" line="152"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-service.c"
               line="1590">whether the load was successful or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1575">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1576">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lock" c:identifier="secret_service_lock">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="727">Lock items or collections in the secret service.

The secret service may not be able to lock items individually, and may
lock an entire collection instead.

If @service is NULL, then secret_service_get() will be called to get
the default #SecretService proxy.

This method returns immediately and completes asynchronously. The secret
service may prompt the user. secret_service_prompt() will be used to handle
any prompts that show up.</doc>
        <source-position filename="../libsecret/secret-service.h" line="192"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="729">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="objects" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="730">the items or collections to lock</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Gio.DBusProxy"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="731">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="732">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="733">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="lock_dbus_paths"
              c:identifier="secret_service_lock_dbus_paths"
              introspectable="0"
              stability="Unstable">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="1207">Lock items or collections in the secret service.

The items or collections are represented by their D-Bus object paths. If you
already have #SecretItem and #SecretCollection proxy objects, use use
secret_service_lock() instead.

The secret service may not be able to lock items individually, and may
lock an entire collection instead.

This method returns immediately and completes asynchronously. The secret
service may prompt the user. secret_service_prompt() will be used to handle
any prompts that show up.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="143"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1209">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="paths" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1210">the D-Bus paths for items or collections to lock</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1211">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1212">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1213">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="lock_dbus_paths_finish"
              c:identifier="secret_service_lock_dbus_paths_finish"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="1245">Complete asynchronous operation to lock items or collections in the secret
service.

The secret service may not be able to lock items individually, and may
lock an entire collection instead.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="149"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="1262">the number of items or collections that were locked</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1247">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1248">asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="locked"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1249">
         location to place array of D-Bus paths of items or collections
         that were locked</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="lock_dbus_paths_sync"
              c:identifier="secret_service_lock_dbus_paths_sync"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="1148">Lock items or collections in the secret service.

The items or collections are represented by their D-Bus object paths. If you
already have #SecretItem and #SecretCollection proxy objects, use use
secret_service_lock_sync() instead.

The secret service may not be able to lock items individually, and may
lock an entire collection instead.

This method may block indefinitely and should not be used in user
interface threads. The secret service may prompt the user.
secret_service_prompt() will be used to handle any prompts that show up.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="1173">the number of items or collections that were locked</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1150">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="paths" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1151">the D-Bus object paths of the items or collections to lock</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1152">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="locked"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1153">
         location to place array of D-Bus paths of items or collections
         that were locked</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="lock_finish"
              c:identifier="secret_service_lock_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="760">Complete asynchronous operation to lock items or collections in the secret
service.

The secret service may not be able to lock items individually, and may
lock an entire collection instead.</doc>
        <source-position filename="../libsecret/secret-service.h" line="198"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-methods.c"
               line="774">the number of items or collections that were locked</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="service"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="762">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="763">asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="locked"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="764">
         location to place list of items or collections that were locked</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="Gio.DBusProxy"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="lock_sync"
              c:identifier="secret_service_lock_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="788">Lock items or collections in the secret service.

The secret service may not be able to lock items individually, and may
lock an entire collection instead.

If @service is NULL, then secret_service_get_sync() will be called to get
the default #SecretService proxy.

This method may block indefinitely and should not be used in user
interface threads. The secret service may prompt the user.
secret_service_prompt() will be used to handle any prompts that show up.</doc>
        <source-position filename="../libsecret/secret-service.h" line="203"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-methods.c"
               line="809">the number of items or collections that were locked</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="service"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="790">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="objects" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="791">the items or collections to lock</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Gio.DBusProxy"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="792">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="locked"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="793">
         location to place list of items or collections that were locked</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="Gio.DBusProxy"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="lookup" c:identifier="secret_service_lookup">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="1420">Lookup a secret value in the secret service.

The @attributes should be a set of key and value string pairs.

If @service is NULL, then secret_service_get() will be called to get
the default #SecretService proxy.

This method will return immediately and complete asynchronously.</doc>
        <source-position filename="../libsecret/secret-service.h" line="249"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1422">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="schema"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1423">the schema for the attributes</doc>
            <type name="Schema" c:type="const SecretSchema*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1424">the attribute keys and values</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1425">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1426">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1427">data to be passed to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_finish"
              c:identifier="secret_service_lookup_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="1481">Finish asynchronous operation to lookup a secret value in the secret service.

If no secret is found then %NULL is returned.</doc>
        <source-position filename="../libsecret/secret-service.h" line="256"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-methods.c"
               line="1491">a newly allocated #SecretValue, which should be
         released with secret_value_unref(), or %NULL if no secret found</doc>
          <type name="Value" c:type="SecretValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1483">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1484">the asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_sync"
              c:identifier="secret_service_lookup_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="1518">Lookup a secret value in the secret service.

The @attributes should be a set of key and value string pairs.

If @service is NULL, then secret_service_get_sync() will be called to get
the default #SecretService proxy.

This method may block indefinitely and should not be used in user interface
threads.</doc>
        <source-position filename="../libsecret/secret-service.h" line="260"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-methods.c"
               line="1536">a newly allocated #SecretValue, which should be
         released with secret_value_unref(), or %NULL if no secret found</doc>
          <type name="Value" c:type="SecretValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1520">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="schema"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1521">the schema for the attributes</doc>
            <type name="Schema" c:type="const SecretSchema*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1522">the attribute keys and values</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1523">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prompt" c:identifier="secret_service_prompt">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="1684">Perform prompting for a #SecretPrompt.

This function is called by other parts of this library to handle prompts
for the various actions that can require prompting.

Override the #SecretServiceClass &lt;literal&gt;prompt_async&lt;/literal&gt; virtual method
to change the behavior of the prompting. The default behavior is to simply
run secret_prompt_perform() on the prompt.</doc>
        <source-position filename="../libsecret/secret-service.h" line="162"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1686">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="prompt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1687">the prompt</doc>
            <type name="Prompt" c:type="SecretPrompt*"/>
          </parameter>
          <parameter name="return_type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1688">the variant type of the prompt result</doc>
            <type name="GLib.VariantType" c:type="const GVariantType*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1689">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1690">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1691">data to be passed to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="prompt_at_dbus_path"
              c:identifier="secret_service_prompt_at_dbus_path"
              introspectable="0"
              stability="Unstable">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="2488">Perform prompting for a #SecretPrompt.

This function is called by other parts of this library to handle prompts
for the various actions that can require prompting.

Override the #SecretServiceClass &lt;literal&gt;prompt_async&lt;/literal&gt; virtual method
to change the behavior of the propmting. The default behavior is to simply
run secret_prompt_perform() on the prompt.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="177"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2490">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="prompt_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2491">the D-Bus object path of the prompt</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="return_type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2492">the variant type of the prompt result</doc>
            <type name="GLib.VariantType" c:type="const GVariantType*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2493">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2494">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2495">data to be passed to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="prompt_at_dbus_path_finish"
              c:identifier="secret_service_prompt_at_dbus_path_finish"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="2527">Complete asynchronous operation to perform prompting for a #SecretPrompt.

Returns a variant result if the prompt was completed and not dismissed. The
type of result depends on the action the prompt is completing, and is defined
in the Secret Service DBus API specification.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="184"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="2541">%NULL if the prompt was dismissed or an
         error occurred, a variant result if the prompt was successful</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2529">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2530">the asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prompt_at_dbus_path_sync"
              c:identifier="secret_service_prompt_at_dbus_path_sync"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="2441">Perform prompting for a #SecretPrompt.

Override the #SecretServiceClass &lt;literal&gt;prompt_async&lt;/literal&gt; virtual method
to change the behavior of the propmting. The default behavior is to simply
run secret_prompt_perform() on the prompt.

Returns a variant result if the prompt was completed and not dismissed. The
type of result depends on the action the prompt is completing, and is defined
in the Secret Service DBus API specification.

This method may block and should not be used in user interface threads.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="171"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="2463">%NULL if the prompt was dismissed or an
         error occurred, a variant result if the prompt was successful</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2443">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="prompt_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2444">the D-Bus object path of the prompt</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2445">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="return_type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2446">the variant type of the prompt result</doc>
            <type name="GLib.VariantType" c:type="const GVariantType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prompt_finish"
              c:identifier="secret_service_prompt_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="1722">Complete asynchronous operation to perform prompting for a #SecretPrompt.

Returns a variant result if the prompt was completed and not dismissed. The
type of result depends on the action the prompt is completing, and is defined
in the Secret Service DBus API specification.</doc>
        <source-position filename="../libsecret/secret-service.h" line="169"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-service.c"
               line="1734">%NULL if the prompt was dismissed or an error occurred,
         a variant result if the prompt was successful</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1724">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1725">the asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prompt_sync"
              c:identifier="secret_service_prompt_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="1639">Perform prompting for a #SecretPrompt.

Runs a prompt and performs the prompting. Returns a variant result if the
prompt was completed and not dismissed. The type of result depends on the
action the prompt is completing, and is defined in the Secret Service DBus
API specification.

This function is called by other parts of this library to handle prompts
for the various actions that can require prompting.

Override the #SecretServiceClass &lt;literal&gt;prompt_sync&lt;/literal&gt; virtual method
to change the behavior of the prompting. The default behavior is to simply
run secret_prompt_perform_sync() on the prompt with a %NULL &lt;literal&gt;window_id&lt;/literal&gt;.</doc>
        <source-position filename="../libsecret/secret-service.h" line="156"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-service.c"
               line="1661">%NULL if the prompt was dismissed or an error occurred,
         a variant result if the prompt was successful</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1641">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="prompt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1642">the prompt</doc>
            <type name="Prompt" c:type="SecretPrompt*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1643">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="return_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1644">the variant type of the prompt result</doc>
            <type name="GLib.VariantType" c:type="const GVariantType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_alias_dbus_path"
              c:identifier="secret_service_read_alias_dbus_path"
              introspectable="0"
              stability="Unstable">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="2196">Lookup which collection is assigned to this alias. Aliases help determine
well known collections, such as 'default'. This method looks up the
dbus object path of the well known collection.

This method will return immediately and complete asynchronously.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="243"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2198">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2199">the alias to lookup</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2200">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2201">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2202">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_alias_dbus_path_finish"
              c:identifier="secret_service_read_alias_dbus_path_finish"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="2229">Finish an asynchronous operation to lookup which collection is assigned
to an alias. This method returns the DBus object path of the collection</doc>
        <source-position filename="../libsecret/secret-paths.h" line="249"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="2240">the collection dbus object path,
         or %NULL if none assigned to the alias</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2231">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2232">asynchronous result passed to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_alias_dbus_path_sync"
              c:identifier="secret_service_read_alias_dbus_path_sync"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="2268">Lookup which collection is assigned to this alias. Aliases help determine
well known collections, such as 'default'. This method returns the dbus
object path of the collection.

This method may block and should not be used in user interface threads.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="253"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="2283">the collection dbus object path,
         or %NULL if none assigned to the alias</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2270">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2271">the alias to lookup</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2272">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="search" c:identifier="secret_service_search">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="260">Search for items matching the @attributes. All collections are searched.
The @attributes should be a table of string keys and string values.

If @service is NULL, then secret_service_get() will be called to get
the default #SecretService proxy.

If %SECRET_SEARCH_ALL is set in @flags, then all the items matching the
search will be returned. Otherwise only the first item will be returned.
This is almost always the unlocked item that was most recently stored.

If %SECRET_SEARCH_UNLOCK is set in @flags, then items will be unlocked
if necessary. In either case, locked and unlocked items will match the
search and be returned. If the unlock fails, the search does not fail.

If %SECRET_SEARCH_LOAD_SECRETS is set in @flags, then the items will have
their secret values loaded and available via secret_item_get_secret().

This function returns immediately and completes asynchronously.</doc>
        <source-position filename="../libsecret/secret-service.h" line="173"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="262">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="schema"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="263">the schema for the attributes</doc>
            <type name="Schema" c:type="const SecretSchema*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="264">search for items matching these attributes</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="265">search option flags</doc>
            <type name="SearchFlags" c:type="SecretSearchFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="266">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="267">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="268">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_finish"
              c:identifier="secret_service_search_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="337">Complete asynchronous operation to search for items.</doc>
        <source-position filename="../libsecret/secret-service.h" line="181"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-methods.c"
               line="345">
         a list of items that matched the search</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Item"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="service"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="339">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="340">asynchronous result passed to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_for_dbus_paths"
              c:identifier="secret_service_search_for_dbus_paths"
              introspectable="0"
              stability="Unstable">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="471">Search for items matching the @attributes, and return their D-Bus object paths.
All collections are searched. The @attributes should be a table of string keys
and string values.

This function returns immediately and completes asynchronously.

When your callback is called use secret_service_search_for_dbus_paths_finish()
to get the results of this function. Only the D-Bus object paths of the
items will be returned. If you would like #SecretItem objects to be returned
instead, then use the secret_service_search() function.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="473">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="schema"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="474">the schema for the attributes</doc>
            <type name="Schema" c:type="const SecretSchema*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="475">search for items matching these attributes</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="476">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="477">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="478">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_for_dbus_paths_finish"
              c:identifier="secret_service_search_for_dbus_paths_finish"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="542">Complete asynchronous operation to search for items, and return their
D-Bus object paths.

Matching items that are locked or unlocked, have their D-Bus paths placed
in the @locked or @unlocked arrays respectively.

D-Bus object paths of the items will be returned in the @unlocked or
@locked arrays. If you would to have #SecretItem objects to be returned
instead, then us the secret_service_search() and
secret_service_search_finish() functions.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="567">whether the search was successful or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="544">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="545">asynchronous result passed to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="unlocked"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="546">
           location to place an array of D-Bus object paths for matching
           items which were locked.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="locked"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="549">
         location to place an array of D-Bus object paths for matching
         items which were locked.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="search_for_dbus_paths_sync"
              c:identifier="secret_service_search_for_dbus_paths_sync"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="604">Search for items matching the @attributes, and return their D-Bus object
paths. All collections are searched. The @attributes should be a table of
string keys and string values.

This function may block indefinitely. Use the asynchronous version
in user interface threads.

Matching items that are locked or unlocked, have their D-Bus paths placed
in the @locked or @unlocked arrays respectively.

D-Bus object paths of the items will be returned in the @unlocked or
@locked arrays. If you would to have #SecretItem objects to be returned
instead, then use the secret_service_search_sync() function.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="634">whether the search was successful or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="606">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="schema"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="607">the schema for the attributes</doc>
            <type name="Schema" c:type="const SecretSchema*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="608">search for items matching these attributes</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="609">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="unlocked"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="610">
           location to place an array of D-Bus object paths for matching
           items which were locked.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="locked"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="613">
         location to place an array of D-Bus object paths for matching
         items which were locked.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="search_sync"
              c:identifier="secret_service_search_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="404">Search for items matching the @attributes. All collections are searched.
The @attributes should be a table of string keys and string values.

If @service is NULL, then secret_service_get_sync() will be called to get
the default #SecretService proxy.

If %SECRET_SEARCH_ALL is set in @flags, then all the items matching the
search will be returned. Otherwise only the first item will be returned.
This is almost always the unlocked item that was most recently stored.

If %SECRET_SEARCH_UNLOCK is set in @flags, then items will be unlocked
if necessary. In either case, locked and unlocked items will match the
search and be returned. If the unlock fails, the search does not fail.

If %SECRET_SEARCH_LOAD_SECRETS is set in @flags, then the items' secret
values will be loaded for any unlocked items. Loaded item secret values
are available via secret_item_get_secret(). If the load of a secret values
fail, then the

This function may block indefinitely. Use the asynchronous version
in user interface threads.</doc>
        <source-position filename="../libsecret/secret-service.h" line="185"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-methods.c"
               line="435">
         a list of items that matched the search</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Item"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="service"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="406">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="schema"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="407">the schema for the attributes</doc>
            <type name="Schema" c:type="const SecretSchema*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="408">search for items matching these attributes</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="409">search option flags</doc>
            <type name="SearchFlags" c:type="SecretSearchFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="410">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_alias" c:identifier="secret_service_set_alias">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="1882">Assign a collection to this alias. Aliases help determine
well known collections, such as 'default'.

If @service is NULL, then secret_service_get() will be called to get
the default #SecretService proxy.

This method will return immediately and complete asynchronously.</doc>
        <source-position filename="../libsecret/secret-service.h" line="283"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1884">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1885">the alias to assign the collection to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="collection"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1886">the collection to assign to the alias</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1887">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1888">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1889">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_alias_finish"
              c:identifier="secret_service_set_alias_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="1946">Finish an asynchronous operation to assign a collection to an alias.</doc>
        <source-position filename="../libsecret/secret-service.h" line="290"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-methods.c"
               line="1954">%TRUE if successful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1948">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1949">asynchronous result passed to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_alias_sync"
              c:identifier="secret_service_set_alias_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="1972">Assign a collection to this alias. Aliases help determine
well known collections, such as 'default'.

If @service is NULL, then secret_service_get_sync() will be called to get
the default #SecretService proxy.

This method may block and should not be used in user interface threads.</doc>
        <source-position filename="../libsecret/secret-service.h" line="294"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-methods.c"
               line="1988">%TRUE if successful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1974">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1975">the alias to assign the collection to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="collection"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1976">the collection to assign to the alias</doc>
            <type name="Collection" c:type="SecretCollection*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1977">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_alias_to_dbus_path"
              c:identifier="secret_service_set_alias_to_dbus_path"
              introspectable="0"
              stability="Unstable">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="2315">Assign a collection to this alias. Aliases help determine
well known collections, such as 'default'. This method takes the dbus object
path of the collection to assign to the alias.

This method will return immediately and complete asynchronously.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="258"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2317">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2318">the alias to assign the collection to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="collection_path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2319">the dbus object path of the collection to assign to the alias</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2320">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2321">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2322">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_alias_to_dbus_path_finish"
              c:identifier="secret_service_set_alias_to_dbus_path_finish"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="2355">Finish an asynchronous operation to assign a collection to an alias.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="265"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="2365">%TRUE if successful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2357">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2358">asynchronous result passed to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_alias_to_dbus_path_sync"
              c:identifier="secret_service_set_alias_to_dbus_path_sync"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="2387">Assign a collection to this alias. Aliases help determine
well known collections, such as 'default'. This method takes the dbus object
path of the collection to assign to the alias.

This method may block and should not be used in user interface threads.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="269"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="2403">%TRUE if successful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2389">a secret service object</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2390">the alias to assign the collection to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="collection_path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2391">the dbus object path of the collection to assign to the alias</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="2392">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="store" c:identifier="secret_service_store">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="1103">Store a secret value in the secret service.

The @attributes should be a set of key and value string pairs.

If the attributes match a secret item already stored in the collection, then
the item will be updated with these new values.

If @service is NULL, then secret_service_get() will be called to get
the default #SecretService proxy.

If @collection is not specified, then the default collection will be
used. Use #SECRET_COLLECTION_SESSION to store the password in the session
collection, which doesn't get stored across login sessions.

This method will return immediately and complete asynchronously.</doc>
        <source-position filename="../libsecret/secret-service.h" line="226"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1105">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="schema"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1106">the schema to use to check attributes</doc>
            <type name="Schema" c:type="const SecretSchema*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1107">the attribute keys and values</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="collection"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1108">a collection alias, or D-Bus object path of the collection where to store the secret</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1109">label for the secret</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1110">the secret value</doc>
            <type name="Value" c:type="SecretValue*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1111">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1112">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1113">data to be passed to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="store_finish"
              c:identifier="secret_service_store_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="1194">Finish asynchronous operation to store a secret value in the secret service.</doc>
        <source-position filename="../libsecret/secret-service.h" line="236"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-methods.c"
               line="1202">whether the storage was successful or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1196">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1197">the asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="store_sync"
              c:identifier="secret_service_store_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="1220">Store a secret value in the secret service.

The @attributes should be a set of key and value string pairs.

If the attributes match a secret item already stored in the collection, then
the item will be updated with these new values.

If @collection is %NULL, then the default collection will be
used. Use #SECRET_COLLECTION_SESSION to store the password in the session
collection, which doesn't get stored across login sessions.

If @service is NULL, then secret_service_get_sync() will be called to get
the default #SecretService proxy.

This method may block indefinitely and should not be used in user interface
threads.</doc>
        <source-position filename="../libsecret/secret-service.h" line="240"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-methods.c"
               line="1248">whether the storage was successful or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1222">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="schema"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1223">the schema for the attributes</doc>
            <type name="Schema" c:type="const SecretSchema*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1224">the attribute keys and values</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="collection"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1225">a collection alias, or D-Bus object path of the collection where to store the secret</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1226">label for the secret</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1227">the secret value</doc>
            <type name="Value" c:type="SecretValue*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="1228">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unlock" c:identifier="secret_service_unlock">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="841">Unlock items or collections in the secret service.

The secret service may not be able to unlock items individually, and may
unlock an entire collection instead.

If @service is NULL, then secret_service_get() will be called to get
the default #SecretService proxy.

This method may block indefinitely and should not be used in user
interface threads. The secret service may prompt the user.
secret_service_prompt() will be used to handle any prompts that show up.</doc>
        <source-position filename="../libsecret/secret-service.h" line="209"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="843">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="objects" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="844">the items or collections to unlock</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Gio.DBusProxy"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="845">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="846">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="847">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unlock_dbus_paths"
              c:identifier="secret_service_unlock_dbus_paths"
              introspectable="0"
              stability="Unstable">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="1336">Unlock items or collections in the secret service.

The items or collections are represented by their D-Bus object paths. If you
already have #SecretItem and #SecretCollection proxy objects, use use
secret_service_unlock() instead.

The secret service may not be able to unlock items individually, and may
unlock an entire collection instead.

This method returns immediately and completes asynchronously. The secret
service may prompt the user. secret_service_prompt() will be used to handle
any prompts that show up.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="160"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1338">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="paths" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1339">the D-Bus paths for items or collections to unlock</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1340">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1341">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1342">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unlock_dbus_paths_finish"
              c:identifier="secret_service_unlock_dbus_paths_finish"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="1375">Complete asynchronous operation to unlock items or collections in the secret
service.

The secret service may not be able to unlock items individually, and may
unlock an entire collection instead.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="166"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="1392">the number of items or collections that were unlocked</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1377">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1378">asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="unlocked"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1379">
           location to place array of D-Bus paths of items or collections
           that were unlocked</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="unlock_dbus_paths_sync"
              c:identifier="secret_service_unlock_dbus_paths_sync"
              introspectable="0"
              stability="Unstable"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-paths.c"
             line="1277">Unlock items or collections in the secret service.

The items or collections are represented by their D-Bus object paths. If you
already have #SecretItem and #SecretCollection proxy objects, use use
secret_service_unlock_sync() instead.

The secret service may not be able to unlock items individually, and may
unlock an entire collection instead.

This method may block indefinitely and should not be used in user
interface threads. The secret service may prompt the user.
secret_service_prompt() will be used to handle any prompts that show up.</doc>
        <source-position filename="../libsecret/secret-paths.h" line="154"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-paths.c"
               line="1302">the number of items or collections that were unlocked</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1279">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="paths" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1280">the D-Bus object paths of the items or collections to unlock</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1281">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="unlocked"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-paths.c"
                 line="1282">
           location to place array of D-Bus paths of items or collections
           that were unlocked</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="unlock_finish"
              c:identifier="secret_service_unlock_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="874">Complete asynchronous operation to unlock items or collections in the secret
service.

The secret service may not be able to unlock items individually, and may
unlock an entire collection instead.</doc>
        <source-position filename="../libsecret/secret-service.h" line="215"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-methods.c"
               line="888">the number of items or collections that were unlocked</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="service"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="876">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="877">asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="unlocked"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="878">
           location to place list of items or collections that were unlocked</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="Gio.DBusProxy"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="unlock_sync"
              c:identifier="secret_service_unlock_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../libsecret/secret-methods.c"
             line="902">Unlock items or collections in the secret service.

The secret service may not be able to unlock items individually, and may
unlock an entire collection instead.

If @service is NULL, then secret_service_get_sync() will be called to get
the default #SecretService proxy.

This method may block indefinitely and should not be used in user
interface threads. The secret service may prompt the user.
secret_service_prompt() will be used to handle any prompts that show up.</doc>
        <source-position filename="../libsecret/secret-service.h" line="220"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-methods.c"
               line="923">the number of items or collections that were unlocked</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="service"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="904">the secret service</doc>
            <type name="Service" c:type="SecretService*"/>
          </instance-parameter>
          <parameter name="objects" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="905">the items or collections to unlock</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Gio.DBusProxy"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="906">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="unlocked"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-methods.c"
                 line="907">
           location to place list of items or collections that were unlocked</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="Gio.DBusProxy"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <property name="collections"
                introspectable="0"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="546">A list of #SecretCollection objects representing the collections in
the Secret Service. This list may be %NULL if the collections have
not been loaded.

To load the collections, specify the %SECRET_SERVICE_LOAD_COLLECTIONS
initialization flag when calling the secret_service_get() or
secret_service_open() functions. Or call the secret_service_load_collections()
method.</doc>
        <type/>
      </property>
      <property name="flags"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="535">A set of flags describing which parts of the secret service have
been initialized.</doc>
        <type name="ServiceFlags"/>
      </property>
      <field name="parent">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="pv" readable="0" private="1">
        <type name="ServicePrivate" c:type="SecretServicePrivate*"/>
      </field>
    </class>
    <record name="ServiceClass"
            c:type="SecretServiceClass"
            glib:is-gtype-struct-for="Service">
      <doc xml:space="preserve"
           filename="../libsecret/secret-service.c"
           line="79">The class for #SecretService.</doc>
      <source-position filename="../libsecret/secret-service.h" line="86"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="81">the parent class</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
      <field name="collection_gtype">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="82">the #GType of the #SecretCollection objects instantiated
                   by the #SecretService proxy</doc>
        <type name="GType" c:type="GType"/>
      </field>
      <field name="item_gtype">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="84">the #GType of the #SecretItem objects instantiated by the
             #SecretService proxy</doc>
        <type name="GType" c:type="GType"/>
      </field>
      <field name="prompt_sync">
        <callback name="prompt_sync" throws="1">
          <source-position filename="../libsecret/secret-service.h" line="63"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1661">%NULL if the prompt was dismissed or an error occurred,
         a variant result if the prompt was successful</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsecret/secret-service.c"
                   line="1641">the secret service</doc>
              <type name="Service" c:type="SecretService*"/>
            </parameter>
            <parameter name="prompt" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsecret/secret-service.c"
                   line="1642">the prompt</doc>
              <type name="Prompt" c:type="SecretPrompt*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../libsecret/secret-service.c"
                   line="1643">optional cancellation object</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="return_type" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsecret/secret-service.c"
                   line="1644">the variant type of the prompt result</doc>
              <type name="GLib.VariantType" c:type="const GVariantType*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prompt_async">
        <callback name="prompt_async">
          <source-position filename="../libsecret/secret-service.h" line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Service" c:type="SecretService*"/>
            </parameter>
            <parameter name="prompt" transfer-ownership="none">
              <type name="Prompt" c:type="SecretPrompt*"/>
            </parameter>
            <parameter name="return_type" transfer-ownership="none">
              <type name="GLib.VariantType" c:type="const GVariantType*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="5">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="5">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prompt_finish">
        <callback name="prompt_finish" throws="1">
          <source-position filename="../libsecret/secret-service.h" line="76"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1734">%NULL if the prompt was dismissed or an error occurred,
         a variant result if the prompt was successful</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsecret/secret-service.c"
                   line="1724">the secret service</doc>
              <type name="Service" c:type="SecretService*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsecret/secret-service.c"
                   line="1725">the asynchronous result passed to the callback</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_collection_gtype">
        <callback name="get_collection_gtype">
          <source-position filename="../libsecret/secret-service.h" line="80"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1761">the gobject type for collections</doc>
            <type name="GType" c:type="GType"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsecret/secret-service.c"
                   line="1756">the secret service</doc>
              <type name="Service" c:type="SecretService*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_item_gtype">
        <callback name="get_item_gtype">
          <source-position filename="../libsecret/secret-service.h" line="82"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-service.c"
                 line="1789">the gobject type for items</doc>
            <type name="GType" c:type="GType"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libsecret/secret-service.c"
                   line="1784">the service</doc>
              <type name="Service" c:type="SecretService*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="14">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="ServiceFlags"
              glib:type-name="SecretServiceFlags"
              glib:get-type="secret_service_flags_get_type"
              c:type="SecretServiceFlags">
      <doc xml:space="preserve"
           filename="../libsecret/secret-service.c"
           line="97">Flags which determine which parts of the #SecretService proxy are initialized
during a secret_service_get() or secret_service_open() operation.</doc>
      <member name="none"
              value="0"
              c:identifier="SECRET_SERVICE_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="99">no flags for initializing the #SecretService</doc>
      </member>
      <member name="open_session"
              value="2"
              c:identifier="SECRET_SERVICE_OPEN_SESSION"
              glib:nick="open-session">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="100">establish a session for transfer of secrets
                              while initializing the #SecretService</doc>
      </member>
      <member name="load_collections"
              value="4"
              c:identifier="SECRET_SERVICE_LOAD_COLLECTIONS"
              glib:nick="load-collections">
        <doc xml:space="preserve"
             filename="../libsecret/secret-service.c"
             line="102">load collections while initializing the
                                  #SecretService</doc>
      </member>
    </bitfield>
    <record name="ServicePrivate" c:type="SecretServicePrivate" disguised="1">
      <source-position filename="../libsecret/secret-service.h" line="48"/>
    </record>
    <record name="Value"
            c:type="SecretValue"
            glib:type-name="SecretValue"
            glib:get-type="secret_value_get_type"
            c:symbol-prefix="value">
      <doc xml:space="preserve"
           filename="../libsecret/secret-value.c"
           line="46">A secret value, like a password or other binary secret.</doc>
      <source-position filename="../libsecret/secret-value.h" line="28"/>
      <constructor name="new" c:identifier="secret_value_new">
        <doc xml:space="preserve"
             filename="../libsecret/secret-value.c"
             line="78">Create a #SecretValue for the secret data passed in. The secret data is
copied into non-pageable 'secure' memory.

If the length is less than zero, then @secret is assumed to be
null-terminated.</doc>
        <source-position filename="../libsecret/secret-value.h" line="34"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-value.c"
               line="90">the new #SecretValue</doc>
          <type name="Value" c:type="SecretValue*"/>
        </return-value>
        <parameters>
          <parameter name="secret" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-value.c"
                 line="80">the secret data</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-value.c"
                 line="81">the length of the data</doc>
            <type name="gssize" c:type="gssize"/>
          </parameter>
          <parameter name="content_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-value.c"
                 line="82">the content type of the data</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_full" c:identifier="secret_value_new_full">
        <doc xml:space="preserve"
             filename="../libsecret/secret-value.c"
             line="112">Create a #SecretValue for the secret data passed in. The secret data is
not copied, and will later be freed with the @destroy function.

If the length is less than zero, then @secret is assumed to be
null-terminated.</doc>
        <source-position filename="../libsecret/secret-value.h" line="38"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-value.c"
               line="125">the new #SecretValue</doc>
          <type name="Value" c:type="SecretValue*"/>
        </return-value>
        <parameters>
          <parameter name="secret" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-value.c"
                 line="114">the secret data</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-value.c"
                 line="115">the length of the data</doc>
            <type name="gssize" c:type="gssize"/>
          </parameter>
          <parameter name="content_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-value.c"
                 line="116">the content type of the data</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-value.c"
                 line="117">function to call to free the secret data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get" c:identifier="secret_value_get">
        <doc xml:space="preserve"
             filename="../libsecret/secret-value.c"
             line="150">Get the secret data in the #SecretValue. The value is not necessarily
null-terminated unless it was created with secret_value_new() or a
null-terminated string was passed to secret_value_new_full().</doc>
        <source-position filename="../libsecret/secret-value.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-value.c"
               line="159">the secret data</doc>
          <array length="0" zero-terminated="0" c:type="const gchar*">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-value.c"
                 line="152">the value</doc>
            <type name="Value" c:type="SecretValue*"/>
          </instance-parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-value.c"
                 line="153">the length of the secret</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_content_type"
              c:identifier="secret_value_get_content_type">
        <doc xml:space="preserve"
             filename="../libsecret/secret-value.c"
             line="191">Get the content type of the secret value, such as
&lt;literal&gt;text/plain&lt;/literal&gt;.</doc>
        <source-position filename="../libsecret/secret-value.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-value.c"
               line="198">the content type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-value.c"
                 line="193">the value</doc>
            <type name="Value" c:type="SecretValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text" c:identifier="secret_value_get_text">
        <doc xml:space="preserve"
             filename="../libsecret/secret-value.c"
             line="171">Get the secret data in the #SecretValue if it contains a textual
value. The content type must be &lt;literal&gt;text/plain&lt;/literal&gt;.</doc>
        <source-position filename="../libsecret/secret-value.h" line="46"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-value.c"
               line="178">the content type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-value.c"
                 line="173">the value</doc>
            <type name="Value" c:type="SecretValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="secret_value_ref">
        <doc xml:space="preserve"
             filename="../libsecret/secret-value.c"
             line="207">Add another reference to the #SecretValue. For each reference
secret_value_unref() should be called to unreference the value.</doc>
        <source-position filename="../libsecret/secret-value.h" line="50"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-value.c"
               line="214">the value</doc>
          <type name="Value" c:type="SecretValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-value.c"
                 line="209">value to reference</doc>
            <type name="Value" c:type="SecretValue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="secret_value_unref">
        <doc xml:space="preserve"
             filename="../libsecret/secret-value.c"
             line="224">Unreference a #SecretValue. When the last reference is gone, then
the value will be freed.</doc>
        <source-position filename="../libsecret/secret-value.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-value.c"
                 line="226">value to unreference</doc>
            <type name="Value" c:type="gpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref_to_password"
              c:identifier="secret_value_unref_to_password"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="../libsecret/secret-value.c"
             line="259">Unreference a #SecretValue and steal the secret data in
#SecretValue as nonpageable memory.</doc>
        <source-position filename="../libsecret/secret-value.h" line="54"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libsecret/secret-value.c"
               line="267">a new password string stored in nonpageable memory
         which must be freed with secret_password_free() when done</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-value.c"
                 line="261">the value</doc>
            <type name="Value" c:type="SecretValue*"/>
          </instance-parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libsecret/secret-value.c"
                 line="262">the length of the secret</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <function name="attributes_build"
              c:identifier="secret_attributes_build"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsecret/secret-attributes.c"
           line="77">Build up a hash table of attribute values.

The variable argument list should contain pairs of a) The attribute name as
a null-terminated string, followed by b) attribute value, either a character
string, an int number, or a gboolean value, as defined in the password
@schema. The list of attribtues should be terminated with a %NULL.</doc>
      <source-position filename="../libsecret/secret-attributes.h" line="29"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsecret/secret-attributes.c"
             line="89">a new table of
         attributes, to be released with g_hash_table_unref()</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="utf8"/>
          <type name="utf8"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="schema" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-attributes.c"
               line="79">the schema for the attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-attributes.c"
               line="80">the attribute keys and values, terminated with %NULL</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="attributes_buildv"
              c:identifier="secret_attributes_buildv"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsecret/secret-attributes.c"
           line="106">Build up a hash table of attribute values.

The variable argument list should contain pairs of a) The attribute name as
a null-terminated string, followed by b) attribute value, either a character
string, an int number, or a gboolean value, as defined in the password
@schema. The list of attribtues should be terminated with a %NULL.</doc>
      <source-position filename="../libsecret/secret-attributes.h" line="32"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsecret/secret-attributes.c"
             line="118">a new table of
         attributes, to be released with g_hash_table_unref()</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="utf8"/>
          <type name="utf8"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="schema" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-attributes.c"
               line="108">the schema for the attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="va" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-attributes.c"
               line="109">the attribute keys and values, terminated with %NULL</doc>
          <type name="va_list" c:type="va_list"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_get_quark"
              c:identifier="secret_error_get_quark"
              moved-to="Error.get_quark">
      <source-position filename="../libsecret/secret-types.h" line="28"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="get_schema"
              c:identifier="secret_get_schema"
              version="0.18.6">
      <doc xml:space="preserve"
           filename="../libsecret/secret-schemas.c"
           line="90">Get a secret storage schema of the given @type.

C code may access the schemas (such as %SECRET_SCHEMA_NOTE) directly, but
language bindings cannot, and must use this accessor.</doc>
      <source-position filename="../libsecret/secret-schemas.h" line="57"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-schemas.c"
             line="99">schema type</doc>
        <type name="Schema" c:type="const SecretSchema*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-schemas.c"
               line="92">type of schema to get</doc>
          <type name="SchemaType" c:type="SecretSchemaType"/>
        </parameter>
      </parameters>
    </function>
    <function name="password_clear"
              c:identifier="secret_password_clear"
              shadowed-by="password_clearv"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="975">Clear unlocked matching passwords from the secret service.

The variable argument list should contain pairs of a) The attribute name as
a null-terminated string, followed by b) attribute value, either a character
string, an int number, or a gboolean value, as defined in the password
@schema. The list of attribtues should be terminated with a %NULL.

All unlocked items that match the attributes will be deleted.

This method will return immediately and complete asynchronously.</doc>
      <source-position filename="../libsecret/secret-password.h" line="149"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="schema" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="977">the schema for the attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="978">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="3">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="979">called when the operation completes</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="980">data to be passed to the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="981">the attribute keys and values, terminated with %NULL</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="password_clear_finish"
              c:identifier="secret_password_clear_finish"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="1056">Finish an asynchronous operation to remove passwords from the secret
service.</doc>
      <source-position filename="../libsecret/secret-password.h" line="161"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-password.c"
             line="1064">whether any passwords were removed</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1058">the asynchronous result passed to the callback</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="password_clear_sync"
              c:identifier="secret_password_clear_sync"
              shadowed-by="password_clearv_sync"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="1074">Remove unlocked matching passwords from the secret service.

The variable argument list should contain pairs of a) The attribute name as
a null-terminated string, followed by b) attribute value, either a character
string, an int number, or a gboolean value, as defined in the password
@schema. The list of attribtues should be terminated with a %NULL.

All unlocked items that match the attributes will be deleted.

This method may block indefinitely and should not be used in user interface
threads.</doc>
      <source-position filename="../libsecret/secret-password.h" line="164"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-password.c"
             line="1093">whether the any passwords were removed</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="schema" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1076">the schema for the attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1077">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1078">location to place an error on failure</doc>
          <type name="GLib.Error" c:type="GError**"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1079">the attribute keys and values, terminated with %NULL</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="password_clearv"
              c:identifier="secret_password_clearv"
              shadows="password_clear">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="1022">Remove unlocked matching passwords from the secret service.

The @attributes should be a set of key and value string pairs.

All unlocked items that match the attributes will be deleted.

This method will return immediately and complete asynchronously.</doc>
      <source-position filename="../libsecret/secret-password.h" line="155"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="schema"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1024">the schema for the attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="attributes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1025">the attribute keys and values</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1026">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="4">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1027">called when the operation completes</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1028">data to be passed to the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="password_clearv_sync"
              c:identifier="secret_password_clearv_sync"
              shadows="password_clear_sync"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="1125">Remove unlocked matching passwords from the secret service.

The @attributes should be a set of key and value string pairs.

All unlocked items that match the attributes will be deleted.

This method may block indefinitely and should not be used in user interface
threads.</doc>
      <source-position filename="../libsecret/secret-password.h" line="169"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-password.c"
             line="1141">whether any passwords were removed</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="schema"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1127">the schema for the attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="attributes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1128">the attribute keys and values</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1129">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="password_free"
              c:identifier="secret_password_free"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="1393">Clear the memory used by a password, and then free it.

This function must be used to free nonpageable memory returned by
secret_password_lookup_nonpageable_finish(),
secret_password_lookup_nonpageable_sync() or
secret_password_lookupv_nonpageable_sync().</doc>
      <source-position filename="../libsecret/secret-password.h" line="203"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="password"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1395">password to free</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="password_lookup"
              c:identifier="secret_password_lookup"
              shadowed-by="password_lookupv"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="513">Lookup a password in the secret service.

The variable argument list should contain pairs of a) The attribute name as
a null-terminated string, followed by b) attribute value, either a character
string, an int number, or a gboolean value, as defined in the password
@schema. The list of attribtues should be terminated with a %NULL.

If no secret is found then %NULL is returned.

This method will return immediately and complete asynchronously.</doc>
      <source-position filename="../libsecret/secret-password.h" line="101"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="schema" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="515">the schema for the attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="516">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="3">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="517">called when the operation completes</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="518">data to be passed to the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="519">the attribute keys and values, terminated with %NULL</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="password_lookup_binary_finish"
              c:identifier="secret_password_lookup_binary_finish"
              version="0.19.0"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="618">Finish an asynchronous operation to lookup a password in the secret service.</doc>
      <source-position filename="../libsecret/secret-password.h" line="118"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsecret/secret-password.c"
             line="625">a newly allocated #SecretValue, which should be
         released with secret_value_unref(), or %NULL if no secret found</doc>
        <type name="Value" c:type="SecretValue*"/>
      </return-value>
      <parameters>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="620">the asynchronous result passed to the callback</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="password_lookup_binary_sync"
              c:identifier="secret_password_lookup_binary_sync"
              version="0.19.0"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="820">Lookup a password in the secret service.

This is similar to secret_password_lookup_sync(), but returns a
#SecretValue instead of a null-terminated password.

This method may block indefinitely and should not be used in user interface
threads.</doc>
      <source-position filename="../libsecret/secret-password.h" line="130"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsecret/secret-password.c"
             line="835">a newly allocated #SecretValue, which should be
         released with secret_value_unref(), or %NULL if no secret found</doc>
        <type name="Value" c:type="SecretValue*"/>
      </return-value>
      <parameters>
        <parameter name="schema" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="822">the schema for the attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="823">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="824">location to place an error on failure</doc>
          <type name="GLib.Error" c:type="GError**"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="825">the attribute keys and values, terminated with %NULL</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="password_lookup_finish"
              c:identifier="secret_password_lookup_finish"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="639">Finish an asynchronous operation to lookup a password in the secret service.</doc>
      <source-position filename="../libsecret/secret-password.h" line="113"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsecret/secret-password.c"
             line="646">a new password string which should be freed with
         secret_password_free() or may be freed with g_free() when done</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="641">the asynchronous result passed to the callback</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="password_lookup_nonpageable_finish"
              c:identifier="secret_password_lookup_nonpageable_finish"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="593">Finish an asynchronous operation to lookup a password in the secret service.</doc>
      <source-position filename="../libsecret/secret-password.h" line="116"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsecret/secret-password.c"
             line="600">a new password string stored in nonpageable memory
         which must be freed with secret_password_free() when done</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="595">the asynchronous result passed to the callback</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="password_lookup_nonpageable_sync"
              c:identifier="secret_password_lookup_nonpageable_sync"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="716">Lookup a password in the secret service.

The variable argument list should contain pairs of a) The attribute name as
a null-terminated string, followed by b) attribute value, either a character
string, an int number, or a gboolean value, as defined in the password
@schema. The list of attribtues should be terminated with a %NULL.

If no secret is found then %NULL is returned.

This method may block indefinitely and should not be used in user interface
threads.</doc>
      <source-position filename="../libsecret/secret-password.h" line="126"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsecret/secret-password.c"
             line="735">a new password string stored in nonpageable memory
         which must be freed with secret_password_free() when done</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="schema" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="718">the schema for the attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="719">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="720">location to place an error on failure</doc>
          <type name="GLib.Error" c:type="GError**"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="721">the attribute keys and values, terminated with %NULL</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="password_lookup_sync"
              c:identifier="secret_password_lookup_sync"
              shadowed-by="password_lookupv_sync"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="664">Lookup a password in the secret service.

The variable argument list should contain pairs of a) The attribute name as
a null-terminated string, followed by b) attribute value, either a character
string, an int number, or a gboolean value, as defined in the password
@schema. The list of attributes should be terminated with a %NULL.

If no secret is found then %NULL is returned.

This method may block indefinitely and should not be used in user interface
threads.</doc>
      <source-position filename="../libsecret/secret-password.h" line="121"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsecret/secret-password.c"
             line="683">a new password string which should be freed with
         secret_password_free() or may be freed with g_free() when done</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="schema" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="666">the schema for the attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="667">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="668">location to place an error on failure</doc>
          <type name="GLib.Error" c:type="GError**"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="669">the attribute keys and values, terminated with %NULL</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="password_lookupv"
              c:identifier="secret_password_lookupv"
              shadows="password_lookup">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="559">Lookup a password in the secret service.

The @attributes should be a set of key and value string pairs.

If no secret is found then %NULL is returned.

This method will return immediately and complete asynchronously.</doc>
      <source-position filename="../libsecret/secret-password.h" line="107"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="schema"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="561">the schema for attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="attributes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="562">the attribute keys and values</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="563">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="4">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="564">called when the operation completes</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="565">data to be passed to the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="password_lookupv_binary_sync"
              c:identifier="secret_password_lookupv_binary_sync"
              version="0.19.0"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="870">Lookup a password in the secret service.

This is similar to secret_password_lookupv_sync(), but returns a
#SecretValue instead of a null-terminated password.

This method may block indefinitely and should not be used in user interface
threads.</doc>
      <source-position filename="../libsecret/secret-password.h" line="144"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsecret/secret-password.c"
             line="885">a newly allocated #SecretValue, which should be
         released with secret_value_unref(), or %NULL if no secret found</doc>
        <type name="Value" c:type="SecretValue*"/>
      </return-value>
      <parameters>
        <parameter name="schema"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="872">the schema for attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="attributes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="873">the attribute keys and values</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="874">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="password_lookupv_nonpageable_sync"
              c:identifier="secret_password_lookupv_nonpageable_sync"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="768">Lookup a password in the secret service.

The @attributes should be a set of key and value string pairs.

If no secret is found then %NULL is returned.

This method may block indefinitely and should not be used in user interface
threads.</doc>
      <source-position filename="../libsecret/secret-password.h" line="140"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsecret/secret-password.c"
             line="784">a new password string stored in non pageable memory
         which should be freed with secret_password_free() when done</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="schema"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="770">the schema for attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="attributes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="771">the attribute keys and values</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="772">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="password_lookupv_sync"
              c:identifier="secret_password_lookupv_sync"
              shadows="password_lookup_sync"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="923">Lookup a password in the secret service.

The @attributes should be a set of key and value string pairs.

If no secret is found then %NULL is returned.

This method may block indefinitely and should not be used in user interface
threads.</doc>
      <source-position filename="../libsecret/secret-password.h" line="135"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsecret/secret-password.c"
             line="939">a new password string which should be freed with
         secret_password_free() or may be freed with g_free() when done</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="schema"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="925">the schema for attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="attributes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="926">the attribute keys and values</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="927">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="password_search"
              c:identifier="secret_password_search"
              shadowed-by="password_searchv"
              version="0.19.0"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="1176">Search for items in the secret service.

The variable argument list should contain pairs of a) The attribute name as
a null-terminated string, followed by b) attribute value, either a character
string, an int number, or a gboolean value, as defined in the password
@schema. The list of attribtues should be terminated with a %NULL.

This method will return immediately and complete asynchronously.</doc>
      <source-position filename="../libsecret/secret-password.h" line="174"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="schema" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1178">the schema for the attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1179">search option flags</doc>
          <type name="SearchFlags" c:type="SecretSearchFlags"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1180">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="4">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1181">called when the operation completes</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1182">data to be passed to the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1183">the attribute keys and values, terminated with %NULL</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="password_search_finish"
              c:identifier="secret_password_search_finish"
              version="0.19.0"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="1260">Finish an asynchronous operation to search for items in the secret service.</doc>
      <source-position filename="../libsecret/secret-password.h" line="200"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsecret/secret-password.c"
             line="1267">a list of
         #SecretRetrievable containing attributes of the matched items</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="Retrievable"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1262">the asynchronous result passed to the callback</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="password_search_sync"
              c:identifier="secret_password_search_sync"
              shadowed-by="password_searchv_sync"
              version="0.19.0"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="1281">Search for items in the secret service.

The variable argument list should contain pairs of a) The attribute name as
a null-terminated string, followed by b) attribute value, either a character
string, an int number, or a gboolean value, as defined in the password
@schema. The list of attributes should be terminated with a %NULL.

If no secret is found then %NULL is returned.

This method may block indefinitely and should not be used in user interface
threads.</doc>
      <source-position filename="../libsecret/secret-password.h" line="188"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsecret/secret-password.c"
             line="1301">a list of
         #SecretRetrievable containing attributes of the matched items</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="Retrievable"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="schema" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1283">the schema for the attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1284">search option flags</doc>
          <type name="SearchFlags" c:type="SecretSearchFlags"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1285">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1286">location to place an error on failure</doc>
          <type name="GLib.Error" c:type="GError**"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1287">the attribute keys and values, terminated with %NULL</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="password_searchv"
              c:identifier="secret_password_searchv"
              shadows="password_search"
              version="0.19.0">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="1224">Search for items in the secret service.

The @attributes should be a set of key and value string pairs.

This method will return immediately and complete asynchronously.</doc>
      <source-position filename="../libsecret/secret-password.h" line="181"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="schema"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1226">the schema for attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="attributes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1227">the attribute keys and values</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1228">search option flags</doc>
          <type name="SearchFlags" c:type="SecretSearchFlags"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1229">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="5">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1230">called when the operation completes</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1231">data to be passed to the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="password_searchv_sync"
              c:identifier="secret_password_searchv_sync"
              shadows="password_search_sync"
              version="0.19.0"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="1337">Search for items in the secret service.

The @attributes should be a set of key and value string pairs.

If no secret is found then %NULL is returned.

This method may block indefinitely and should not be used in user interface
threads.</doc>
      <source-position filename="../libsecret/secret-password.h" line="194"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libsecret/secret-password.c"
             line="1354">a list of
         #SecretRetrievable containing attributes of the matched items</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="Retrievable"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="schema"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1339">the schema for attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="attributes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1340">the attribute keys and values</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1341">search option flags</doc>
          <type name="SearchFlags" c:type="SecretSearchFlags"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1342">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="password_store"
              c:identifier="secret_password_store"
              shadowed-by="password_storev"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="46">Store a password in the secret service.

The variable argument list should contain pairs of a) The attribute name as
a null-terminated string, followed by b) attribute value, either a character
string, an int number, or a gboolean value, as defined in the @schema.
The list of attribtues should be terminated with a %NULL.

If the attributes match a secret item already stored in the collection, then
the item will be updated with these new values.

If @collection is %NULL, then the default collection will be
used. Use #SECRET_COLLECTION_SESSION to store the password in the session
collection, which doesn't get stored across login sessions.

This method will return immediately and complete asynchronously.</doc>
      <source-position filename="../libsecret/secret-password.h" line="30"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="schema" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="48">the schema for attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="collection"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="49">a collection alias, or D-Bus object path of the collection where to store the secret</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="label" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="50">label for the secret</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="password" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="51">the null-terminated password to store</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="52">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="6">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="53">called when the operation completes</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="54">data to be passed to the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="55">the attribute keys and values, terminated with %NULL</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="password_store_binary"
              c:identifier="secret_password_store_binary"
              shadowed-by="password_storev_binary"
              version="0.19.0"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="158">Store a password in the secret service.

This is similar to secret_password_store(), but takes a
#SecretValue as the argument instead of a null-terminated password.

This method will return immediately and complete asynchronously.</doc>
      <source-position filename="../libsecret/secret-password.h" line="48"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="schema" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="160">the schema for attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="collection"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="161">a collection alias, or D-Bus object path of the collection where to store the secret</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="label" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="162">label for the secret</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="163">a #SecretValue</doc>
          <type name="Value" c:type="SecretValue*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="164">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="6">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="165">called when the operation completes</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="166">data to be passed to the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="167">the attribute keys and values, terminated with %NULL</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="password_store_binary_sync"
              c:identifier="secret_password_store_binary_sync"
              shadowed-by="password_storev_binary_sync"
              version="0.19.0"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="397">Store a password in the secret service.

This is similar to secret_password_store_sync(), but takes a
#SecretValue as the argument instead of a null terminated password.

This method may block indefinitely and should not be used in user interface
threads.</doc>
      <source-position filename="../libsecret/secret-password.h" line="85"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-password.c"
             line="415">whether the storage was successful or not</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="schema" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="399">the schema for attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="collection"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="400">a collection alias, or D-Bus object path of the collection where to store the secret</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="label" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="401">label for the secret</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="402">a #SecretValue</doc>
          <type name="Value" c:type="SecretValue*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="403">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="404">location to place an error on failure</doc>
          <type name="GLib.Error" c:type="GError**"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="405">the attribute keys and values, terminated with %NULL</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="password_store_finish"
              c:identifier="secret_password_store_finish"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="253">Finish asynchronous operation to store a password in the secret service.</doc>
      <source-position filename="../libsecret/secret-password.h" line="66"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-password.c"
             line="260">whether the storage was successful or not</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="255">the asynchronous result passed to the callback</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="password_store_sync"
              c:identifier="secret_password_store_sync"
              shadowed-by="password_storev_sync"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="270">Store a password in the secret service.

The variable argument list should contain pairs of a) The attribute name as
a null-terminated string, followed by b) attribute value, either a character
string, an int number, or a gboolean value, as defined in the @schema.
The list of attribtues should be terminated with a %NULL.

If the attributes match a secret item already stored in the collection, then
the item will be updated with these new values.

If @collection is %NULL, then the default collection will be
used. Use #SECRET_COLLECTION_SESSION to store the password in the session
collection, which doesn't get stored across login sessions.

This method may block indefinitely and should not be used in user interface
threads.</doc>
      <source-position filename="../libsecret/secret-password.h" line="69"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-password.c"
             line="297">whether the storage was successful or not</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="schema" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="272">the schema for attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="collection"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="273">a collection alias, or D-Bus object path of the collection where to store the secret</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="label" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="274">label for the secret</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="password" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="275">the null-terminated password to store</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="276">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="277">location to place an error on failure</doc>
          <type name="GLib.Error" c:type="GError**"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="278">the attribute keys and values, terminated with %NULL</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="password_storev"
              c:identifier="secret_password_storev"
              shadows="password_store">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="105">Store a password in the secret service.

The @attributes should be a set of key and value string pairs.

If the attributes match a secret item already stored in the collection, then
the item will be updated with these new values.

If @collection is %NULL, then the default collection will be
used. Use #SECRET_COLLECTION_SESSION to store the password in the session
collection, which doesn't get stored across login sessions.

This method will return immediately and complete asynchronously.</doc>
      <source-position filename="../libsecret/secret-password.h" line="39"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="schema"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="107">the schema for attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="attributes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="108">the attribute keys and values</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </parameter>
        <parameter name="collection"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="109">a collection alias, or D-Bus object path of the collection where to store the secret</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="label" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="110">label for the secret</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="password" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="111">the null-terminated password to store</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="112">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="7">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="113">called when the operation completes</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="114">data to be passed to the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="password_storev_binary"
              c:identifier="secret_password_storev_binary"
              shadows="password_store_binary"
              version="0.19.0">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="210">Store a password in the secret service.

This is similar to secret_password_storev(), but takes a
#SecretValue as the argument instead of a null-terminated password.

This method will return immediately and complete asynchronously.</doc>
      <source-position filename="../libsecret/secret-password.h" line="57"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="schema"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="212">the schema for attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="attributes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="213">the attribute keys and values</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </parameter>
        <parameter name="collection"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="214">a collection alias, or D-Bus object path of the collection where to store the secret</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="label" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="215">label for the secret</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="216">a #SecretValue</doc>
          <type name="Value" c:type="SecretValue*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="217">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="7">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="218">called when the operation completes</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="219">data to be passed to the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="password_storev_binary_sync"
              c:identifier="secret_password_storev_binary_sync"
              shadows="password_store_binary_sync"
              version="0.19.0"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="453">Store a password in the secret service.

This is similar to secret_password_storev_sync(), but takes a
#SecretValue as the argument instead of a null-terminated passwords.

This method may block indefinitely and should not be used in user interface
threads.</doc>
      <source-position filename="../libsecret/secret-password.h" line="93"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-password.c"
             line="471">whether the storage was successful or not</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="schema"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="455">the schema for attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="attributes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="456">the attribute keys and values</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </parameter>
        <parameter name="collection"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="457">a collection alias, or D-Bus object path of the collection where to store the secret</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="label" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="458">label for the secret</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="459">a #SecretValue</doc>
          <type name="Value" c:type="SecretValue*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="460">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="password_storev_sync"
              c:identifier="secret_password_storev_sync"
              shadows="password_store_sync"
              throws="1">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="333">Store a password in the secret service.

The @attributes should be a set of key and value string pairs.

If the attributes match a secret item already stored in the collection, then
the item will be updated with these new values.

If @collection is %NULL, then the default collection will be
used. Use #SECRET_COLLECTION_SESSION to store the password in the session
collection, which doesn't get stored across login sessions.

This method may block indefinitely and should not be used in user interface
threads.</doc>
      <source-position filename="../libsecret/secret-password.h" line="77"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libsecret/secret-password.c"
             line="357">whether the storage was successful or not</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="schema"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="335">the schema for attributes</doc>
          <type name="Schema" c:type="const SecretSchema*"/>
        </parameter>
        <parameter name="attributes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="336">the attribute keys and values</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </parameter>
        <parameter name="collection"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="337">a collection alias, or D-Bus object path of the collection where to store the secret</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="label" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="338">label for the secret</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="password" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="339">the null-terminated password to store</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="340">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="password_wipe" c:identifier="secret_password_wipe">
      <doc xml:space="preserve"
           filename="../libsecret/secret-password.c"
           line="1413">Clear the memory used by a password.</doc>
      <source-position filename="../libsecret/secret-password.h" line="205"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="password"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libsecret/secret-password.c"
               line="1415">password to clear</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
